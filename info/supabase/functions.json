[
    {
        "schema_name": "auth",
        "function_name": "email",
        "arguments": "",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION auth.email()\n RETURNS text\n LANGUAGE sql\n STABLE\nAS $function$\n  select \n  coalesce(\n    nullif(current_setting('request.jwt.claim.email', true), ''),\n    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')\n  )::text\n$function$\n"
    },
    {
        "schema_name": "auth",
        "function_name": "jwt",
        "arguments": "",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION auth.jwt()\n RETURNS jsonb\n LANGUAGE sql\n STABLE\nAS $function$\n  select \n    coalesce(\n        nullif(current_setting('request.jwt.claim', true), ''),\n        nullif(current_setting('request.jwt.claims', true), '')\n    )::jsonb\n$function$\n"
    },
    {
        "schema_name": "auth",
        "function_name": "role",
        "arguments": "",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION auth.role()\n RETURNS text\n LANGUAGE sql\n STABLE\nAS $function$\n  select \n  coalesce(\n    nullif(current_setting('request.jwt.claim.role', true), ''),\n    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')\n  )::text\n$function$\n"
    },
    {
        "schema_name": "auth",
        "function_name": "uid",
        "arguments": "",
        "return_type": "uuid",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION auth.uid()\n RETURNS uuid\n LANGUAGE sql\n STABLE\nAS $function$\n  select \n  coalesce(\n    nullif(current_setting('request.jwt.claim.sub', true), ''),\n    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')\n  )::uuid\n$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "armor",
        "arguments": "bytea",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.armor(bytea)\n RETURNS text\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_armor$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "armor",
        "arguments": "bytea, text[], text[]",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.armor(bytea, text[], text[])\n RETURNS text\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_armor$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "crypt",
        "arguments": "text, text",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.crypt(text, text)\n RETURNS text\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_crypt$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "dearmor",
        "arguments": "text",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.dearmor(text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_dearmor$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "decrypt",
        "arguments": "bytea, bytea, text",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.decrypt(bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_decrypt$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "decrypt_iv",
        "arguments": "bytea, bytea, bytea, text",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_decrypt_iv$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "digest",
        "arguments": "bytea, text",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.digest(bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_digest$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "digest",
        "arguments": "text, text",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.digest(text, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_digest$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "encrypt",
        "arguments": "bytea, bytea, text",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.encrypt(bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_encrypt$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "encrypt_iv",
        "arguments": "bytea, bytea, bytea, text",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_encrypt_iv$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "gen_random_bytes",
        "arguments": "integer",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.gen_random_bytes(integer)\n RETURNS bytea\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_random_bytes$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "gen_random_uuid",
        "arguments": "",
        "return_type": "uuid",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.gen_random_uuid()\n RETURNS uuid\n LANGUAGE c\n PARALLEL SAFE\nAS '$libdir/pgcrypto', $function$pg_random_uuid$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "gen_salt",
        "arguments": "text, integer",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.gen_salt(text, integer)\n RETURNS text\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_gen_salt_rounds$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "gen_salt",
        "arguments": "text",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.gen_salt(text)\n RETURNS text\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_gen_salt$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "grant_pg_cron_access",
        "arguments": "",
        "return_type": "event_trigger",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.grant_pg_cron_access()\n RETURNS event_trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  IF EXISTS (\n    SELECT\n    FROM pg_event_trigger_ddl_commands() AS ev\n    JOIN pg_extension AS ext\n    ON ev.objid = ext.oid\n    WHERE ext.extname = 'pg_cron'\n  )\n  THEN\n    grant usage on schema cron to postgres with grant option;\n\n    alter default privileges in schema cron grant all on tables to postgres with grant option;\n    alter default privileges in schema cron grant all on functions to postgres with grant option;\n    alter default privileges in schema cron grant all on sequences to postgres with grant option;\n\n    alter default privileges for user supabase_admin in schema cron grant all\n        on sequences to postgres with grant option;\n    alter default privileges for user supabase_admin in schema cron grant all\n        on tables to postgres with grant option;\n    alter default privileges for user supabase_admin in schema cron grant all\n        on functions to postgres with grant option;\n\n    grant all privileges on all tables in schema cron to postgres with grant option;\n    revoke all on table cron.job from postgres;\n    grant select on table cron.job to postgres with grant option;\n  END IF;\nEND;\n$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "grant_pg_graphql_access",
        "arguments": "",
        "return_type": "event_trigger",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.grant_pg_graphql_access()\n RETURNS event_trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    func_is_graphql_resolve bool;\nBEGIN\n    func_is_graphql_resolve = (\n        SELECT n.proname = 'resolve'\n        FROM pg_event_trigger_ddl_commands() AS ev\n        LEFT JOIN pg_catalog.pg_proc AS n\n        ON ev.objid = n.oid\n    );\n\n    IF func_is_graphql_resolve\n    THEN\n        -- Update public wrapper to pass all arguments through to the pg_graphql resolve func\n        DROP FUNCTION IF EXISTS graphql_public.graphql;\n        create or replace function graphql_public.graphql(\n            \"operationName\" text default null,\n            query text default null,\n            variables jsonb default null,\n            extensions jsonb default null\n        )\n            returns jsonb\n            language sql\n        as $$\n            select graphql.resolve(\n                query := query,\n                variables := coalesce(variables, '{}'),\n                \"operationName\" := \"operationName\",\n                extensions := extensions\n            );\n        $$;\n\n        -- This hook executes when `graphql.resolve` is created. That is not necessarily the last\n        -- function in the extension so we need to grant permissions on existing entities AND\n        -- update default permissions to any others that are created after `graphql.resolve`\n        grant usage on schema graphql to postgres, anon, authenticated, service_role;\n        grant select on all tables in schema graphql to postgres, anon, authenticated, service_role;\n        grant execute on all functions in schema graphql to postgres, anon, authenticated, service_role;\n        grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;\n        alter default privileges in schema graphql grant all on tables to postgres, anon, authenticated, service_role;\n        alter default privileges in schema graphql grant all on functions to postgres, anon, authenticated, service_role;\n        alter default privileges in schema graphql grant all on sequences to postgres, anon, authenticated, service_role;\n\n        -- Allow postgres role to allow granting usage on graphql and graphql_public schemas to custom roles\n        grant usage on schema graphql_public to postgres with grant option;\n        grant usage on schema graphql to postgres with grant option;\n    END IF;\n\nEND;\n$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "grant_pg_net_access",
        "arguments": "",
        "return_type": "event_trigger",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.grant_pg_net_access()\n RETURNS event_trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  IF EXISTS (\n    SELECT 1\n    FROM pg_event_trigger_ddl_commands() AS ev\n    JOIN pg_extension AS ext\n    ON ev.objid = ext.oid\n    WHERE ext.extname = 'pg_net'\n  )\n  THEN\n    IF NOT EXISTS (\n      SELECT 1\n      FROM pg_roles\n      WHERE rolname = 'supabase_functions_admin'\n    )\n    THEN\n      CREATE USER supabase_functions_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;\n    END IF;\n\n    GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;\n\n    IF EXISTS (\n      SELECT FROM pg_extension\n      WHERE extname = 'pg_net'\n      -- all versions in use on existing projects as of 2025-02-20\n      -- version 0.12.0 onwards don't need these applied\n      AND extversion IN ('0.2', '0.6', '0.7', '0.7.1', '0.8', '0.10.0', '0.11.0')\n    ) THEN\n      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;\n      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;\n\n      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;\n      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;\n\n      REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;\n      REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;\n\n      GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;\n      GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;\n    END IF;\n  END IF;\nEND;\n$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "hmac",
        "arguments": "bytea, bytea, text",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.hmac(bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_hmac$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "hmac",
        "arguments": "text, text, text",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.hmac(text, text, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pg_hmac$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pg_stat_statements",
        "arguments": "showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT shared_blk_read_time double precision, OUT shared_blk_write_time double precision, OUT local_blk_read_time double precision, OUT local_blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision, OUT jit_deform_count bigint, OUT jit_deform_time double precision, OUT stats_since timestamp with time zone, OUT minmax_stats_since timestamp with time zone",
        "return_type": "SETOF record",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT shared_blk_read_time double precision, OUT shared_blk_write_time double precision, OUT local_blk_read_time double precision, OUT local_blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision, OUT jit_deform_count bigint, OUT jit_deform_time double precision, OUT stats_since timestamp with time zone, OUT minmax_stats_since timestamp with time zone)\n RETURNS SETOF record\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pg_stat_statements', $function$pg_stat_statements_1_11$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pg_stat_statements_info",
        "arguments": "OUT dealloc bigint, OUT stats_reset timestamp with time zone",
        "return_type": "record",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone)\n RETURNS record\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pg_stat_statements', $function$pg_stat_statements_info$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pg_stat_statements_reset",
        "arguments": "userid oid DEFAULT 0, dbid oid DEFAULT 0, queryid bigint DEFAULT 0, minmax_only boolean DEFAULT false",
        "return_type": "timestamp with time zone",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pg_stat_statements_reset(userid oid DEFAULT 0, dbid oid DEFAULT 0, queryid bigint DEFAULT 0, minmax_only boolean DEFAULT false)\n RETURNS timestamp with time zone\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pg_stat_statements', $function$pg_stat_statements_reset_1_11$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgp_armor_headers",
        "arguments": "text, OUT key text, OUT value text",
        "return_type": "SETOF record",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text)\n RETURNS SETOF record\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_armor_headers$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgp_key_id",
        "arguments": "bytea",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgp_key_id(bytea)\n RETURNS text\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_key_id_w$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgp_pub_decrypt",
        "arguments": "bytea, bytea",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgp_pub_decrypt(bytea, bytea)\n RETURNS text\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_decrypt_text$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgp_pub_decrypt",
        "arguments": "bytea, bytea, text, text",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text)\n RETURNS text\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_decrypt_text$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgp_pub_decrypt",
        "arguments": "bytea, bytea, text",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text)\n RETURNS text\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_decrypt_text$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgp_pub_decrypt_bytea",
        "arguments": "bytea, bytea, text",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_decrypt_bytea$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgp_pub_decrypt_bytea",
        "arguments": "bytea, bytea, text, text",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_decrypt_bytea$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgp_pub_decrypt_bytea",
        "arguments": "bytea, bytea",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_decrypt_bytea$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgp_pub_encrypt",
        "arguments": "text, bytea",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgp_pub_encrypt(text, bytea)\n RETURNS bytea\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_encrypt_text$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgp_pub_encrypt",
        "arguments": "text, bytea, text",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgp_pub_encrypt(text, bytea, text)\n RETURNS bytea\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_encrypt_text$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgp_pub_encrypt_bytea",
        "arguments": "bytea, bytea, text",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text)\n RETURNS bytea\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_encrypt_bytea$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgp_pub_encrypt_bytea",
        "arguments": "bytea, bytea",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea)\n RETURNS bytea\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_pub_encrypt_bytea$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgp_sym_decrypt",
        "arguments": "bytea, text, text",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgp_sym_decrypt(bytea, text, text)\n RETURNS text\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_decrypt_text$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgp_sym_decrypt",
        "arguments": "bytea, text",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgp_sym_decrypt(bytea, text)\n RETURNS text\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_decrypt_text$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgp_sym_decrypt_bytea",
        "arguments": "bytea, text",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_decrypt_bytea$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgp_sym_decrypt_bytea",
        "arguments": "bytea, text, text",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_decrypt_bytea$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgp_sym_encrypt",
        "arguments": "text, text, text",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgp_sym_encrypt(text, text, text)\n RETURNS bytea\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_encrypt_text$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgp_sym_encrypt",
        "arguments": "text, text",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgp_sym_encrypt(text, text)\n RETURNS bytea\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_encrypt_text$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgp_sym_encrypt_bytea",
        "arguments": "bytea, text",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text)\n RETURNS bytea\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_encrypt_bytea$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgp_sym_encrypt_bytea",
        "arguments": "bytea, text, text",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text)\n RETURNS bytea\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/pgcrypto', $function$pgp_sym_encrypt_bytea$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgrst_ddl_watch",
        "arguments": "",
        "return_type": "event_trigger",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgrst_ddl_watch()\n RETURNS event_trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n  cmd record;\nBEGIN\n  FOR cmd IN SELECT * FROM pg_event_trigger_ddl_commands()\n  LOOP\n    IF cmd.command_tag IN (\n      'CREATE SCHEMA', 'ALTER SCHEMA'\n    , 'CREATE TABLE', 'CREATE TABLE AS', 'SELECT INTO', 'ALTER TABLE'\n    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'\n    , 'CREATE VIEW', 'ALTER VIEW'\n    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'\n    , 'CREATE FUNCTION', 'ALTER FUNCTION'\n    , 'CREATE TRIGGER'\n    , 'CREATE TYPE', 'ALTER TYPE'\n    , 'CREATE RULE'\n    , 'COMMENT'\n    )\n    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp\n    AND cmd.schema_name is distinct from 'pg_temp'\n    THEN\n      NOTIFY pgrst, 'reload schema';\n    END IF;\n  END LOOP;\nEND; $function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "pgrst_drop_watch",
        "arguments": "",
        "return_type": "event_trigger",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.pgrst_drop_watch()\n RETURNS event_trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n  obj record;\nBEGIN\n  FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()\n  LOOP\n    IF obj.object_type IN (\n      'schema'\n    , 'table'\n    , 'foreign table'\n    , 'view'\n    , 'materialized view'\n    , 'function'\n    , 'trigger'\n    , 'type'\n    , 'rule'\n    )\n    AND obj.is_temporary IS false -- no pg_temp objects\n    THEN\n      NOTIFY pgrst, 'reload schema';\n    END IF;\n  END LOOP;\nEND; $function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "set_graphql_placeholder",
        "arguments": "",
        "return_type": "event_trigger",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.set_graphql_placeholder()\n RETURNS event_trigger\n LANGUAGE plpgsql\nAS $function$\n    DECLARE\n    graphql_is_dropped bool;\n    BEGIN\n    graphql_is_dropped = (\n        SELECT ev.schema_name = 'graphql_public'\n        FROM pg_event_trigger_dropped_objects() AS ev\n        WHERE ev.schema_name = 'graphql_public'\n    );\n\n    IF graphql_is_dropped\n    THEN\n        create or replace function graphql_public.graphql(\n            \"operationName\" text default null,\n            query text default null,\n            variables jsonb default null,\n            extensions jsonb default null\n        )\n            returns jsonb\n            language plpgsql\n        as $$\n            DECLARE\n                server_version float;\n            BEGIN\n                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);\n\n                IF server_version >= 14 THEN\n                    RETURN jsonb_build_object(\n                        'errors', jsonb_build_array(\n                            jsonb_build_object(\n                                'message', 'pg_graphql extension is not enabled.'\n                            )\n                        )\n                    );\n                ELSE\n                    RETURN jsonb_build_object(\n                        'errors', jsonb_build_array(\n                            jsonb_build_object(\n                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'\n                            )\n                        )\n                    );\n                END IF;\n            END;\n        $$;\n    END IF;\n\n    END;\n$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "uuid_generate_v1",
        "arguments": "",
        "return_type": "uuid",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.uuid_generate_v1()\n RETURNS uuid\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_generate_v1$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "uuid_generate_v1mc",
        "arguments": "",
        "return_type": "uuid",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.uuid_generate_v1mc()\n RETURNS uuid\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_generate_v1mc$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "uuid_generate_v3",
        "arguments": "namespace uuid, name text",
        "return_type": "uuid",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.uuid_generate_v3(namespace uuid, name text)\n RETURNS uuid\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_generate_v3$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "uuid_generate_v4",
        "arguments": "",
        "return_type": "uuid",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.uuid_generate_v4()\n RETURNS uuid\n LANGUAGE c\n PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_generate_v4$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "uuid_generate_v5",
        "arguments": "namespace uuid, name text",
        "return_type": "uuid",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.uuid_generate_v5(namespace uuid, name text)\n RETURNS uuid\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_generate_v5$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "uuid_nil",
        "arguments": "",
        "return_type": "uuid",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.uuid_nil()\n RETURNS uuid\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_nil$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "uuid_ns_dns",
        "arguments": "",
        "return_type": "uuid",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.uuid_ns_dns()\n RETURNS uuid\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_ns_dns$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "uuid_ns_oid",
        "arguments": "",
        "return_type": "uuid",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.uuid_ns_oid()\n RETURNS uuid\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_ns_oid$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "uuid_ns_url",
        "arguments": "",
        "return_type": "uuid",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.uuid_ns_url()\n RETURNS uuid\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_ns_url$function$\n"
    },
    {
        "schema_name": "extensions",
        "function_name": "uuid_ns_x500",
        "arguments": "",
        "return_type": "uuid",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION extensions.uuid_ns_x500()\n RETURNS uuid\n LANGUAGE c\n IMMUTABLE PARALLEL SAFE STRICT\nAS '$libdir/uuid-ossp', $function$uuid_ns_x500$function$\n"
    },
    {
        "schema_name": "graphql",
        "function_name": "_internal_resolve",
        "arguments": "query text, variables jsonb DEFAULT '{}'::jsonb, \"operationName\" text DEFAULT NULL::text, extensions jsonb DEFAULT NULL::jsonb",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION graphql._internal_resolve(query text, variables jsonb DEFAULT '{}'::jsonb, \"operationName\" text DEFAULT NULL::text, extensions jsonb DEFAULT NULL::jsonb)\n RETURNS jsonb\n LANGUAGE c\nAS '$libdir/pg_graphql', $function$resolve_wrapper$function$\n"
    },
    {
        "schema_name": "graphql",
        "function_name": "comment_directive",
        "arguments": "comment_ text",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION graphql.comment_directive(comment_ text)\n RETURNS jsonb\n LANGUAGE sql\n IMMUTABLE\nAS $function$\n    /*\n    comment on column public.account.name is '@graphql.name: myField'\n    */\n    select\n        coalesce(\n            (\n                regexp_match(\n                    comment_,\n                    '@graphql\\((.+)\\)'\n                )\n            )[1]::jsonb,\n            jsonb_build_object()\n        )\n$function$\n"
    },
    {
        "schema_name": "graphql",
        "function_name": "exception",
        "arguments": "message text",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION graphql.exception(message text)\n RETURNS text\n LANGUAGE plpgsql\nAS $function$\nbegin\n    raise exception using errcode='22000', message=message;\nend;\n$function$\n"
    },
    {
        "schema_name": "graphql",
        "function_name": "get_schema_version",
        "arguments": "",
        "return_type": "integer",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION graphql.get_schema_version()\n RETURNS integer\n LANGUAGE sql\n SECURITY DEFINER\nAS $function$\n    select last_value from graphql.seq_schema_version;\n$function$\n"
    },
    {
        "schema_name": "graphql",
        "function_name": "increment_schema_version",
        "arguments": "",
        "return_type": "event_trigger",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION graphql.increment_schema_version()\n RETURNS event_trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nbegin\n    perform pg_catalog.nextval('graphql.seq_schema_version');\nend;\n$function$\n"
    },
    {
        "schema_name": "graphql",
        "function_name": "resolve",
        "arguments": "query text, variables jsonb DEFAULT '{}'::jsonb, \"operationName\" text DEFAULT NULL::text, extensions jsonb DEFAULT NULL::jsonb",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION graphql.resolve(query text, variables jsonb DEFAULT '{}'::jsonb, \"operationName\" text DEFAULT NULL::text, extensions jsonb DEFAULT NULL::jsonb)\n RETURNS jsonb\n LANGUAGE plpgsql\nAS $function$\ndeclare\n    res jsonb;\n    message_text text;\nbegin\n  begin\n    select graphql._internal_resolve(\"query\" := \"query\",\n                                     \"variables\" := \"variables\",\n                                     \"operationName\" := \"operationName\",\n                                     \"extensions\" := \"extensions\") into res;\n    return res;\n  exception\n    when others then\n    get stacked diagnostics message_text = message_text;\n    return\n    jsonb_build_object('data', null,\n                       'errors', jsonb_build_array(jsonb_build_object('message', message_text)));\n  end;\nend;\n$function$\n"
    },
    {
        "schema_name": "graphql_public",
        "function_name": "graphql",
        "arguments": "\"operationName\" text DEFAULT NULL::text, query text DEFAULT NULL::text, variables jsonb DEFAULT NULL::jsonb, extensions jsonb DEFAULT NULL::jsonb",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION graphql_public.graphql(\"operationName\" text DEFAULT NULL::text, query text DEFAULT NULL::text, variables jsonb DEFAULT NULL::jsonb, extensions jsonb DEFAULT NULL::jsonb)\n RETURNS jsonb\n LANGUAGE sql\nAS $function$\n            select graphql.resolve(\n                query := query,\n                variables := coalesce(variables, '{}'),\n                \"operationName\" := \"operationName\",\n                extensions := extensions\n            );\n        $function$\n"
    },
    {
        "schema_name": "pgbouncer",
        "function_name": "get_auth",
        "arguments": "p_usename text",
        "return_type": "TABLE(username text, password text)",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION pgbouncer.get_auth(p_usename text)\n RETURNS TABLE(username text, password text)\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nbegin\n    raise debug 'PgBouncer auth request: %', p_usename;\n\n    return query\n    select \n        rolname::text, \n        case when rolvaliduntil < now() \n            then null \n            else rolpassword::text \n        end \n    from pg_authid \n    where rolname=$1 and rolcanlogin;\nend;\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "auth_is_admin",
        "arguments": "",
        "return_type": "boolean",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.auth_is_admin()\n RETURNS boolean\n LANGUAGE sql\n STABLE SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n  SELECT COALESCE(\r\n    (SELECT role = 'admin' \r\n     FROM profiles \r\n     WHERE user_id = auth.uid() \r\n     AND is_active = true\r\n     LIMIT 1), \r\n    false\r\n  );\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "bulk_update_articles_featured",
        "arguments": "article_ids uuid[], featured_status boolean",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.bulk_update_articles_featured(article_ids uuid[], featured_status boolean)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    updated_count integer;\r\n    failed_ids uuid[];\r\n    result jsonb;\r\nBEGIN\r\n    -- Check admin privileges\r\n    IF NOT public.is_current_user_admin() THEN\r\n        RAISE EXCEPTION 'Access denied. Admin privileges required.';\r\n    END IF;\r\n\r\n    -- Validate input\r\n    IF article_ids IS NULL OR array_length(article_ids, 1) IS NULL THEN\r\n        RAISE EXCEPTION 'Article IDs array cannot be empty.';\r\n    END IF;\r\n\r\n    -- Update articles\r\n    WITH updated_articles AS (\r\n        UPDATE articles \r\n        SET \r\n            featured = featured_status,\r\n            updated_at = NOW()\r\n        WHERE id = ANY(article_ids)\r\n        RETURNING id\r\n    )\r\n    SELECT COUNT(*) INTO updated_count FROM updated_articles;\r\n\r\n    -- Find any failed IDs\r\n    SELECT array_agg(id) INTO failed_ids\r\n    FROM unnest(article_ids) AS id\r\n    WHERE id NOT IN (SELECT articles.id FROM articles WHERE articles.id = id);\r\n\r\n    result := jsonb_build_object(\r\n        'success', true,\r\n        'updated_count', updated_count,\r\n        'requested_count', array_length(article_ids, 1),\r\n        'failed_ids', COALESCE(failed_ids, ARRAY[]::uuid[]),\r\n        'operation', CASE WHEN featured_status THEN 'feature' ELSE 'unfeature' END,\r\n        'executed_at', NOW()\r\n    );\r\n\r\n    RETURN result;\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "bulk_update_articles_published",
        "arguments": "article_ids uuid[], published_status boolean, update_published_at boolean DEFAULT true",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.bulk_update_articles_published(article_ids uuid[], published_status boolean, update_published_at boolean DEFAULT true)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    updated_count integer;\r\n    failed_ids uuid[];\r\n    result jsonb;\r\nBEGIN\r\n    -- Check admin privileges\r\n    IF NOT public.is_current_user_admin() THEN\r\n        RAISE EXCEPTION 'Access denied. Admin privileges required.';\r\n    END IF;\r\n\r\n    -- Validate input\r\n    IF article_ids IS NULL OR array_length(article_ids, 1) IS NULL THEN\r\n        RAISE EXCEPTION 'Article IDs array cannot be empty.';\r\n    END IF;\r\n\r\n    -- Update articles with published_at timestamp handling\r\n    WITH updated_articles AS (\r\n        UPDATE articles \r\n        SET \r\n            published = published_status,\r\n            published_at = CASE \r\n                WHEN published_status = true AND update_published_at THEN NOW()\r\n                WHEN published_status = false THEN NULL\r\n                ELSE published_at\r\n            END,\r\n            updated_at = NOW()\r\n        WHERE id = ANY(article_ids)\r\n        RETURNING id\r\n    )\r\n    SELECT COUNT(*) INTO updated_count FROM updated_articles;\r\n\r\n    -- Find any failed IDs\r\n    SELECT array_agg(id) INTO failed_ids\r\n    FROM unnest(article_ids) AS id\r\n    WHERE id NOT IN (SELECT articles.id FROM articles WHERE articles.id = id);\r\n\r\n    result := jsonb_build_object(\r\n        'success', true,\r\n        'updated_count', updated_count,\r\n        'requested_count', array_length(article_ids, 1),\r\n        'failed_ids', COALESCE(failed_ids, ARRAY[]::uuid[]),\r\n        'operation', CASE WHEN published_status THEN 'publish' ELSE 'unpublish' END,\r\n        'executed_at', NOW()\r\n    );\r\n\r\n    RETURN result;\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "bulk_update_inquiries_status",
        "arguments": "inquiry_ids uuid[], new_status text, admin_notes text DEFAULT NULL::text",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.bulk_update_inquiries_status(inquiry_ids uuid[], new_status text, admin_notes text DEFAULT NULL::text)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    updated_count integer;\r\n    failed_ids uuid[];\r\n    admin_user_id uuid;\r\n    result jsonb;\r\nBEGIN\r\n    -- Check admin privileges\r\n    IF NOT public.is_current_user_admin() THEN\r\n        RAISE EXCEPTION 'Access denied. Admin privileges required.';\r\n    END IF;\r\n\r\n    -- Validate input\r\n    IF inquiry_ids IS NULL OR array_length(inquiry_ids, 1) IS NULL THEN\r\n        RAISE EXCEPTION 'Inquiry IDs array cannot be empty.';\r\n    END IF;\r\n\r\n    -- Validate status\r\n    IF new_status NOT IN ('new', 'pending', 'in_progress', 'resolved', 'closed') THEN\r\n        RAISE EXCEPTION 'Invalid status. Must be one of: new, pending, in_progress, resolved, closed';\r\n    END IF;\r\n\r\n    -- Get admin user ID\r\n    SELECT user_id INTO admin_user_id FROM profiles WHERE user_id = auth.uid();\r\n\r\n    -- Update inquiries\r\n    WITH updated_inquiries AS (\r\n        UPDATE inquiries \r\n        SET \r\n            status = new_status,\r\n            notes = CASE \r\n                WHEN admin_notes IS NOT NULL THEN \r\n                    COALESCE(notes || E'\\n\\n', '') || '[' || NOW()::text || ' - Admin]: ' || admin_notes\r\n                ELSE notes\r\n            END,\r\n            assigned_to = CASE \r\n                WHEN new_status IN ('pending', 'in_progress') THEN admin_user_id\r\n                ELSE assigned_to\r\n            END,\r\n            updated_at = NOW()\r\n        WHERE id = ANY(inquiry_ids)\r\n        RETURNING id\r\n    )\r\n    SELECT COUNT(*) INTO updated_count FROM updated_inquiries;\r\n\r\n    -- Find any failed IDs\r\n    SELECT array_agg(id) INTO failed_ids\r\n    FROM unnest(inquiry_ids) AS id\r\n    WHERE id NOT IN (SELECT inquiries.id FROM inquiries WHERE inquiries.id = id);\r\n\r\n    result := jsonb_build_object(\r\n        'success', true,\r\n        'updated_count', updated_count,\r\n        'requested_count', array_length(inquiry_ids, 1),\r\n        'failed_ids', COALESCE(failed_ids, ARRAY[]::uuid[]),\r\n        'new_status', new_status,\r\n        'executed_at', NOW()\r\n    );\r\n\r\n    RETURN result;\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "bulk_update_projects_featured",
        "arguments": "project_ids uuid[], featured_status boolean",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.bulk_update_projects_featured(project_ids uuid[], featured_status boolean)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    updated_count integer;\r\n    failed_ids uuid[];\r\n    result jsonb;\r\nBEGIN\r\n    -- Check admin privileges\r\n    IF NOT public.is_current_user_admin() THEN\r\n        RAISE EXCEPTION 'Access denied. Admin privileges required.';\r\n    END IF;\r\n\r\n    -- Validate input\r\n    IF project_ids IS NULL OR array_length(project_ids, 1) IS NULL THEN\r\n        RAISE EXCEPTION 'Project IDs array cannot be empty.';\r\n    END IF;\r\n\r\n    -- Update projects\r\n    WITH updated_projects AS (\r\n        UPDATE projects \r\n        SET \r\n            featured = featured_status,\r\n            updated_at = NOW()\r\n        WHERE id = ANY(project_ids)\r\n        RETURNING id\r\n    )\r\n    SELECT COUNT(*) INTO updated_count FROM updated_projects;\r\n\r\n    -- Find any failed IDs\r\n    SELECT array_agg(id) INTO failed_ids\r\n    FROM unnest(project_ids) AS id\r\n    WHERE id NOT IN (SELECT projects.id FROM projects WHERE projects.id = id);\r\n\r\n    result := jsonb_build_object(\r\n        'success', true,\r\n        'updated_count', updated_count,\r\n        'requested_count', array_length(project_ids, 1),\r\n        'failed_ids', COALESCE(failed_ids, ARRAY[]::uuid[]),\r\n        'operation', CASE WHEN featured_status THEN 'feature' ELSE 'unfeature' END,\r\n        'executed_at', NOW()\r\n    );\r\n\r\n    RETURN result;\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "bulk_update_projects_published",
        "arguments": "project_ids uuid[], published_status boolean, update_published_at boolean DEFAULT true",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.bulk_update_projects_published(project_ids uuid[], published_status boolean, update_published_at boolean DEFAULT true)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    updated_count integer;\r\n    failed_ids uuid[];\r\n    result jsonb;\r\nBEGIN\r\n    -- Check admin privileges\r\n    IF NOT public.is_current_user_admin() THEN\r\n        RAISE EXCEPTION 'Access denied. Admin privileges required.';\r\n    END IF;\r\n\r\n    -- Validate input\r\n    IF project_ids IS NULL OR array_length(project_ids, 1) IS NULL THEN\r\n        RAISE EXCEPTION 'Project IDs array cannot be empty.';\r\n    END IF;\r\n\r\n    -- Update projects with error handling\r\n    WITH updated_projects AS (\r\n        UPDATE projects \r\n        SET \r\n            published = published_status,\r\n            updated_at = NOW()\r\n        WHERE id = ANY(project_ids)\r\n        RETURNING id\r\n    )\r\n    SELECT COUNT(*) INTO updated_count FROM updated_projects;\r\n\r\n    -- Find any failed IDs\r\n    SELECT array_agg(id) INTO failed_ids\r\n    FROM unnest(project_ids) AS id\r\n    WHERE id NOT IN (SELECT projects.id FROM projects WHERE projects.id = id);\r\n\r\n    result := jsonb_build_object(\r\n        'success', true,\r\n        'updated_count', updated_count,\r\n        'requested_count', array_length(project_ids, 1),\r\n        'failed_ids', COALESCE(failed_ids, ARRAY[]::uuid[]),\r\n        'operation', CASE WHEN published_status THEN 'publish' ELSE 'unpublish' END,\r\n        'executed_at', NOW()\r\n    );\r\n\r\n    RETURN result;\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "check_email_exists",
        "arguments": "email_input text",
        "return_type": "boolean",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.check_email_exists(email_input text)\n RETURNS boolean\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n    RETURN EXISTS (\r\n        SELECT 1 FROM auth.users WHERE email = email_input\r\n    );\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "cleanup_unpublished_content",
        "arguments": "days_old integer DEFAULT 90, dry_run boolean DEFAULT true",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.cleanup_unpublished_content(days_old integer DEFAULT 90, dry_run boolean DEFAULT true)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    cutoff_date timestamp with time zone;\r\n    projects_to_delete integer;\r\n    articles_to_delete integer;\r\n    deleted_projects integer := 0;\r\n    deleted_articles integer := 0;\r\n    result jsonb;\r\nBEGIN\r\n    -- Check admin privileges\r\n    IF NOT public.is_current_user_admin() THEN\r\n        RAISE EXCEPTION 'Access denied. Admin privileges required.';\r\n    END IF;\r\n\r\n    -- Validate input\r\n    IF days_old < 1 THEN\r\n        RAISE EXCEPTION 'Days old must be at least 1';\r\n    END IF;\r\n\r\n    cutoff_date := NOW() - INTERVAL '1 day' * days_old;\r\n\r\n    -- Count items to be deleted\r\n    SELECT COUNT(*) INTO projects_to_delete\r\n    FROM projects \r\n    WHERE published = false AND created_at < cutoff_date;\r\n\r\n    SELECT COUNT(*) INTO articles_to_delete\r\n    FROM articles \r\n    WHERE published = false AND created_at < cutoff_date;\r\n\r\n    -- If not dry run, perform deletions\r\n    IF NOT dry_run THEN\r\n        -- Delete unpublished projects\r\n        WITH deleted_proj AS (\r\n            DELETE FROM projects \r\n            WHERE published = false AND created_at < cutoff_date\r\n            RETURNING id\r\n        )\r\n        SELECT COUNT(*) INTO deleted_projects FROM deleted_proj;\r\n\r\n        -- Delete unpublished articles\r\n        WITH deleted_art AS (\r\n            DELETE FROM articles \r\n            WHERE published = false AND created_at < cutoff_date\r\n            RETURNING id\r\n        )\r\n        SELECT COUNT(*) INTO deleted_articles FROM deleted_art;\r\n    END IF;\r\n\r\n    result := jsonb_build_object(\r\n        'dry_run', dry_run,\r\n        'cutoff_date', cutoff_date,\r\n        'days_old', days_old,\r\n        'projects_affected', projects_to_delete,\r\n        'articles_affected', articles_to_delete,\r\n        'projects_deleted', deleted_projects,\r\n        'articles_deleted', deleted_articles,\r\n        'executed_at', NOW()\r\n    );\r\n\r\n    RETURN result;\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "create_missing_profiles",
        "arguments": "",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.create_missing_profiles()\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    missing_users UUID[];\r\n    user_id UUID;\r\n    created_count INTEGER := 0;\r\n    error_count INTEGER := 0;\r\n    result JSONB;\r\nBEGIN\r\n    SELECT public.get_users_without_profiles() INTO missing_users;\r\n    \r\n    IF array_length(missing_users, 1) IS NULL THEN\r\n        RETURN jsonb_build_object('success', true, 'message', 'No missing profiles found', 'created_count', 0, 'error_count', 0, 'total_users', 0);\r\n    END IF;\r\n    \r\n    FOREACH user_id IN ARRAY missing_users LOOP\r\n        BEGIN\r\n            SELECT public.ensure_user_profile(user_id) INTO result;\r\n            IF (result->>'success')::boolean THEN\r\n                created_count := created_count + 1;\r\n            ELSE\r\n                error_count := error_count + 1;\r\n            END IF;\r\n        EXCEPTION WHEN OTHERS THEN\r\n            error_count := error_count + 1;\r\n        END;\r\n    END LOOP;\r\n    \r\n    RETURN jsonb_build_object(\r\n        'success', true,\r\n        'message', format('Profile creation complete: %s created, %s errors', created_count, error_count),\r\n        'created_count', created_count,\r\n        'error_count', error_count,\r\n        'total_users', array_length(missing_users, 1)\r\n    );\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "find_orphaned_media_files",
        "arguments": "",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.find_orphaned_media_files()\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    orphaned_files jsonb;\r\n    orphaned_count integer;\r\nBEGIN\r\n    -- Check admin privileges\r\n    IF NOT public.is_current_user_admin() THEN\r\n        RAISE EXCEPTION 'Access denied. Admin privileges required.';\r\n    END IF;\r\n\r\n    -- Find media files not referenced in articles or projects\r\n    WITH orphaned AS (\r\n        SELECT mf.* FROM media_files mf\r\n        WHERE NOT EXISTS (\r\n            SELECT 1 FROM articles a \r\n            WHERE a.featured_image LIKE '%' || mf.filename || '%'\r\n               OR a.content LIKE '%' || mf.filename || '%'\r\n        )\r\n        AND NOT EXISTS (\r\n            SELECT 1 FROM projects p \r\n            WHERE p.image_url LIKE '%' || mf.filename || '%'\r\n        )\r\n        ORDER BY mf.created_at DESC\r\n    )\r\n    SELECT jsonb_agg(\r\n        jsonb_build_object(\r\n            'id', id,\r\n            'filename', filename,\r\n            'original_filename', original_filename,\r\n            'file_path', file_path,\r\n            'file_size', file_size,\r\n            'mime_type', mime_type,\r\n            'created_at', created_at\r\n        )\r\n    ), COUNT(*) \r\n    INTO orphaned_files, orphaned_count\r\n    FROM orphaned;\r\n\r\n    RETURN jsonb_build_object(\r\n        'orphaned_files', COALESCE(orphaned_files, '[]'::jsonb),\r\n        'count', COALESCE(orphaned_count, 0),\r\n        'generated_at', NOW()\r\n    );\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "get_admin_dashboard_stats",
        "arguments": "",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.get_admin_dashboard_stats()\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    stats jsonb;\r\n    total_projects integer;\r\n    published_projects integer;\r\n    draft_projects integer;\r\n    featured_projects integer;\r\n    total_articles integer;\r\n    published_articles integer;\r\n    draft_articles integer;\r\n    featured_articles integer;\r\n    total_inquiries integer;\r\n    new_inquiries integer;\r\n    pending_inquiries integer;\r\n    resolved_inquiries integer;\r\n    total_page_views bigint;\r\n    total_users integer;\r\n    admin_users integer;\r\n    active_users integer;\r\n    total_media_files integer;\r\n    recent_page_views bigint;\r\nBEGIN\r\n    -- Check if user is admin\r\n    IF NOT public.is_current_user_admin() THEN\r\n        RAISE EXCEPTION 'Access denied. Admin privileges required.';\r\n    END IF;\r\n\r\n    -- Projects statistics\r\n    SELECT \r\n        COUNT(*) INTO total_projects \r\n    FROM projects;\r\n    \r\n    SELECT \r\n        COUNT(*) INTO published_projects \r\n    FROM projects WHERE published = true;\r\n    \r\n    SELECT \r\n        COUNT(*) INTO draft_projects \r\n    FROM projects WHERE published = false;\r\n    \r\n    SELECT \r\n        COUNT(*) INTO featured_projects \r\n    FROM projects WHERE featured = true;\r\n\r\n    -- Articles statistics\r\n    SELECT \r\n        COUNT(*) INTO total_articles \r\n    FROM articles;\r\n    \r\n    SELECT \r\n        COUNT(*) INTO published_articles \r\n    FROM articles WHERE published = true;\r\n    \r\n    SELECT \r\n        COUNT(*) INTO draft_articles \r\n    FROM articles WHERE published = false;\r\n    \r\n    SELECT \r\n        COUNT(*) INTO featured_articles \r\n    FROM articles WHERE featured = true;\r\n\r\n    -- Inquiries statistics\r\n    SELECT \r\n        COUNT(*) INTO total_inquiries \r\n    FROM inquiries;\r\n    \r\n    SELECT \r\n        COUNT(*) INTO new_inquiries \r\n    FROM inquiries WHERE status = 'new';\r\n    \r\n    SELECT \r\n        COUNT(*) INTO pending_inquiries \r\n    FROM inquiries WHERE status IN ('pending', 'in_progress');\r\n    \r\n    SELECT \r\n        COUNT(*) INTO resolved_inquiries \r\n    FROM inquiries WHERE status IN ('resolved', 'closed');\r\n\r\n    -- Page views statistics\r\n    SELECT \r\n        COUNT(*) INTO total_page_views \r\n    FROM page_views;\r\n    \r\n    SELECT \r\n        COUNT(*) INTO recent_page_views \r\n    FROM page_views \r\n    WHERE created_at >= NOW() - INTERVAL '30 days';\r\n\r\n    -- Users statistics\r\n    SELECT \r\n        COUNT(*) INTO total_users \r\n    FROM profiles;\r\n    \r\n    SELECT \r\n        COUNT(*) INTO admin_users \r\n    FROM profiles WHERE role = 'admin';\r\n    \r\n    SELECT \r\n        COUNT(*) INTO active_users \r\n    FROM profiles WHERE is_active = true;\r\n\r\n    -- Media files statistics\r\n    SELECT \r\n        COUNT(*) INTO total_media_files \r\n    FROM media_files;\r\n\r\n    -- Build comprehensive statistics object\r\n    stats := jsonb_build_object(\r\n        'projects', jsonb_build_object(\r\n            'total', total_projects,\r\n            'published', published_projects,\r\n            'drafts', draft_projects,\r\n            'featured', featured_projects\r\n        ),\r\n        'articles', jsonb_build_object(\r\n            'total', total_articles,\r\n            'published', published_articles,\r\n            'drafts', draft_articles,\r\n            'featured', featured_articles\r\n        ),\r\n        'inquiries', jsonb_build_object(\r\n            'total', total_inquiries,\r\n            'new', new_inquiries,\r\n            'pending', pending_inquiries,\r\n            'resolved', resolved_inquiries\r\n        ),\r\n        'analytics', jsonb_build_object(\r\n            'total_page_views', total_page_views,\r\n            'recent_page_views', recent_page_views\r\n        ),\r\n        'users', jsonb_build_object(\r\n            'total', total_users,\r\n            'admins', admin_users,\r\n            'active', active_users\r\n        ),\r\n        'media', jsonb_build_object(\r\n            'total_files', total_media_files\r\n        ),\r\n        'generated_at', NOW()\r\n    );\r\n\r\n    RETURN stats;\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "get_articles_analytics",
        "arguments": "time_period text DEFAULT '30d'::text",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.get_articles_analytics(time_period text DEFAULT '30d'::text)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    result jsonb;\r\n    period_filter timestamp with time zone;\r\n    articles_by_category jsonb;\r\n    articles_by_author jsonb;\r\n    top_articles jsonb;\r\n    recent_articles jsonb;\r\n    reading_time_stats jsonb;\r\nBEGIN\r\n    -- Check admin privileges\r\n    IF NOT public.is_current_user_admin() THEN\r\n        RAISE EXCEPTION 'Access denied. Admin privileges required.';\r\n    END IF;\r\n\r\n    -- Set time period filter\r\n    CASE time_period\r\n        WHEN '7d' THEN period_filter := NOW() - INTERVAL '7 days';\r\n        WHEN '30d' THEN period_filter := NOW() - INTERVAL '30 days';\r\n        WHEN '90d' THEN period_filter := NOW() - INTERVAL '90 days';\r\n        WHEN '1y' THEN period_filter := NOW() - INTERVAL '1 year';\r\n        ELSE period_filter := NOW() - INTERVAL '30 days';\r\n    END CASE;\r\n\r\n    -- Articles by category\r\n    SELECT jsonb_object_agg(category, count) INTO articles_by_category\r\n    FROM (\r\n        SELECT COALESCE(category, 'uncategorized') as category, COUNT(*) as count\r\n        FROM articles\r\n        WHERE published = true\r\n        GROUP BY category\r\n        ORDER BY count DESC\r\n    ) cat_stats;\r\n\r\n    -- Articles by author\r\n    SELECT jsonb_object_agg(author_name, count) INTO articles_by_author\r\n    FROM (\r\n        SELECT COALESCE(p.full_name, p.email) as author_name, COUNT(*) as count\r\n        FROM articles a\r\n        JOIN profiles p ON a.author_id = p.user_id\r\n        WHERE a.published = true\r\n        GROUP BY p.user_id, p.full_name, p.email\r\n        ORDER BY count DESC\r\n    ) author_stats;\r\n\r\n    -- Top articles by view count\r\n    SELECT jsonb_agg(\r\n        jsonb_build_object(\r\n            'id', id,\r\n            'title', title,\r\n            'slug', slug,\r\n            'view_count', view_count,\r\n            'category', category,\r\n            'published_at', published_at\r\n        )\r\n    ) INTO top_articles\r\n    FROM (\r\n        SELECT * FROM articles\r\n        WHERE published = true\r\n        ORDER BY view_count DESC\r\n        LIMIT 10\r\n    ) top;\r\n\r\n    -- Recent articles\r\n    SELECT jsonb_agg(\r\n        jsonb_build_object(\r\n            'id', id,\r\n            'title', title,\r\n            'slug', slug,\r\n            'published', published,\r\n            'featured', featured,\r\n            'view_count', view_count,\r\n            'created_at', created_at,\r\n            'published_at', published_at\r\n        )\r\n    ) INTO recent_articles\r\n    FROM (\r\n        SELECT * FROM articles\r\n        WHERE created_at >= period_filter\r\n        ORDER BY created_at DESC\r\n        LIMIT 10\r\n    ) recent;\r\n\r\n    -- Reading time statistics\r\n    SELECT jsonb_build_object(\r\n        'avg_reading_time', COALESCE(AVG(reading_time_minutes), 0),\r\n        'min_reading_time', COALESCE(MIN(reading_time_minutes), 0),\r\n        'max_reading_time', COALESCE(MAX(reading_time_minutes), 0)\r\n    ) INTO reading_time_stats\r\n    FROM articles \r\n    WHERE published = true AND reading_time_minutes IS NOT NULL;\r\n\r\n    result := jsonb_build_object(\r\n        'time_period', time_period,\r\n        'articles_by_category', COALESCE(articles_by_category, '{}'::jsonb),\r\n        'articles_by_author', COALESCE(articles_by_author, '{}'::jsonb),\r\n        'top_articles', COALESCE(top_articles, '[]'::jsonb),\r\n        'recent_articles', COALESCE(recent_articles, '[]'::jsonb),\r\n        'reading_time_stats', COALESCE(reading_time_stats, '{}'::jsonb),\r\n        'generated_at', NOW()\r\n    );\r\n\r\n    RETURN result;\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "get_inquiries_analytics",
        "arguments": "time_period text DEFAULT '30d'::text",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.get_inquiries_analytics(time_period text DEFAULT '30d'::text)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    result jsonb;\r\n    period_filter timestamp with time zone;\r\n    inquiries_by_status jsonb;\r\n    inquiries_by_priority jsonb;\r\n    recent_inquiries jsonb;\r\n    response_time_stats jsonb;\r\nBEGIN\r\n    -- Check admin privileges\r\n    IF NOT public.is_current_user_admin() THEN\r\n        RAISE EXCEPTION 'Access denied. Admin privileges required.';\r\n    END IF;\r\n\r\n    -- Set time period filter\r\n    CASE time_period\r\n        WHEN '7d' THEN period_filter := NOW() - INTERVAL '7 days';\r\n        WHEN '30d' THEN period_filter := NOW() - INTERVAL '30 days';\r\n        WHEN '90d' THEN period_filter := NOW() - INTERVAL '90 days';\r\n        WHEN '1y' THEN period_filter := NOW() - INTERVAL '1 year';\r\n        ELSE period_filter := NOW() - INTERVAL '30 days';\r\n    END CASE;\r\n\r\n    -- Inquiries by status\r\n    SELECT jsonb_object_agg(status, count) INTO inquiries_by_status\r\n    FROM (\r\n        SELECT status, COUNT(*) as count\r\n        FROM inquiries\r\n        WHERE created_at >= period_filter\r\n        GROUP BY status\r\n        ORDER BY count DESC\r\n    ) status_stats;\r\n\r\n    -- Inquiries by priority\r\n    SELECT jsonb_object_agg(priority::text, count) INTO inquiries_by_priority\r\n    FROM (\r\n        SELECT COALESCE(priority, 0) as priority, COUNT(*) as count\r\n        FROM inquiries\r\n        WHERE created_at >= period_filter\r\n        GROUP BY priority\r\n        ORDER BY priority DESC\r\n    ) priority_stats;\r\n\r\n    -- Recent inquiries\r\n    SELECT jsonb_agg(\r\n        jsonb_build_object(\r\n            'id', id,\r\n            'name', name,\r\n            'email', email,\r\n            'company', company,\r\n            'subject', subject,\r\n            'status', status,\r\n            'priority', priority,\r\n            'created_at', created_at,\r\n            'updated_at', updated_at\r\n        )\r\n    ) INTO recent_inquiries\r\n    FROM (\r\n        SELECT * FROM inquiries\r\n        WHERE created_at >= period_filter\r\n        ORDER BY created_at DESC\r\n        LIMIT 10\r\n    ) recent;\r\n\r\n    result := jsonb_build_object(\r\n        'time_period', time_period,\r\n        'inquiries_by_status', COALESCE(inquiries_by_status, '{}'::jsonb),\r\n        'inquiries_by_priority', COALESCE(inquiries_by_priority, '{}'::jsonb),\r\n        'recent_inquiries', COALESCE(recent_inquiries, '[]'::jsonb),\r\n        'total_inquiries_period', (\r\n            SELECT COUNT(*) FROM inquiries WHERE created_at >= period_filter\r\n        ),\r\n        'generated_at', NOW()\r\n    );\r\n\r\n    RETURN result;\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "get_page_views_analytics",
        "arguments": "time_period text DEFAULT '30d'::text",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.get_page_views_analytics(time_period text DEFAULT '30d'::text)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    result jsonb;\r\n    period_filter timestamp with time zone;\r\n    views_by_page jsonb;\r\n    views_by_day jsonb;\r\n    top_referrers jsonb;\r\n    unique_visitors integer;\r\n    total_views integer;\r\nBEGIN\r\n    -- Check admin privileges\r\n    IF NOT public.is_current_user_admin() THEN\r\n        RAISE EXCEPTION 'Access denied. Admin privileges required.';\r\n    END IF;\r\n\r\n    -- Set time period filter\r\n    CASE time_period\r\n        WHEN '7d' THEN period_filter := NOW() - INTERVAL '7 days';\r\n        WHEN '30d' THEN period_filter := NOW() - INTERVAL '30 days';\r\n        WHEN '90d' THEN period_filter := NOW() - INTERVAL '90 days';\r\n        WHEN '1y' THEN period_filter := NOW() - INTERVAL '1 year';\r\n        ELSE period_filter := NOW() - INTERVAL '30 days';\r\n    END CASE;\r\n\r\n    -- Views by page\r\n    SELECT jsonb_object_agg(page_path, count) INTO views_by_page\r\n    FROM (\r\n        SELECT page_path, COUNT(*) as count\r\n        FROM page_views\r\n        WHERE created_at >= period_filter\r\n        GROUP BY page_path\r\n        ORDER BY count DESC\r\n        LIMIT 20\r\n    ) page_stats;\r\n\r\n    -- Views by day (for charts)\r\n    SELECT jsonb_object_agg(view_date, count) INTO views_by_day\r\n    FROM (\r\n        SELECT DATE(created_at) as view_date, COUNT(*) as count\r\n        FROM page_views\r\n        WHERE created_at >= period_filter\r\n        GROUP BY DATE(created_at)\r\n        ORDER BY view_date ASC\r\n    ) daily_stats;\r\n\r\n    -- Top referrers\r\n    SELECT jsonb_object_agg(referrer, count) INTO top_referrers\r\n    FROM (\r\n        SELECT COALESCE(referrer, 'direct') as referrer, COUNT(*) as count\r\n        FROM page_views\r\n        WHERE created_at >= period_filter\r\n        GROUP BY referrer\r\n        ORDER BY count DESC\r\n        LIMIT 10\r\n    ) referrer_stats;\r\n\r\n    -- Unique visitors (by session_id)\r\n    SELECT COUNT(DISTINCT session_id) INTO unique_visitors\r\n    FROM page_views\r\n    WHERE created_at >= period_filter AND session_id IS NOT NULL;\r\n\r\n    -- Total views in period\r\n    SELECT COUNT(*) INTO total_views\r\n    FROM page_views\r\n    WHERE created_at >= period_filter;\r\n\r\n    result := jsonb_build_object(\r\n        'time_period', time_period,\r\n        'total_views', total_views,\r\n        'unique_visitors', unique_visitors,\r\n        'views_by_page', COALESCE(views_by_page, '{}'::jsonb),\r\n        'views_by_day', COALESCE(views_by_day, '{}'::jsonb),\r\n        'top_referrers', COALESCE(top_referrers, '{}'::jsonb),\r\n        'generated_at', NOW()\r\n    );\r\n\r\n    RETURN result;\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "get_profile_analytics",
        "arguments": "",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.get_profile_analytics()\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    analytics JSONB;\r\n    thirty_days_ago TIMESTAMPTZ := NOW() - INTERVAL '30 days';\r\nBEGIN\r\n    SELECT jsonb_build_object(\r\n        'total_users', COUNT(*),\r\n        'verified_users', COUNT(*) FILTER (WHERE is_verified = true),\r\n        'completed_profiles', COUNT(*) FILTER (WHERE profile_completed = true),\r\n        'google_users', COUNT(*) FILTER (WHERE provider = 'google'),\r\n        'email_users', COUNT(*) FILTER (WHERE provider = 'email'),\r\n        'recent_signups', COUNT(*) FILTER (WHERE created_at >= thirty_days_ago),\r\n        'active_users_30d', COUNT(*) FILTER (WHERE last_login_at >= thirty_days_ago),\r\n        'completion_rate', ROUND((COUNT(*) FILTER (WHERE profile_completed = true)::float / NULLIF(COUNT(*), 0) * 100), 2)\r\n    ) INTO analytics\r\n    FROM public.profiles\r\n    WHERE is_active = true;\r\n    \r\n    RETURN analytics;\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "get_projects_analytics",
        "arguments": "time_period text DEFAULT '30d'::text",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.get_projects_analytics(time_period text DEFAULT '30d'::text)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    result jsonb;\r\n    period_filter timestamp with time zone;\r\n    projects_by_category jsonb;\r\n    projects_by_status jsonb;\r\n    projects_by_year jsonb;\r\n    recent_projects jsonb;\r\nBEGIN\r\n    -- Check admin privileges\r\n    IF NOT public.is_current_user_admin() THEN\r\n        RAISE EXCEPTION 'Access denied. Admin privileges required.';\r\n    END IF;\r\n\r\n    -- Set time period filter\r\n    CASE time_period\r\n        WHEN '7d' THEN period_filter := NOW() - INTERVAL '7 days';\r\n        WHEN '30d' THEN period_filter := NOW() - INTERVAL '30 days';\r\n        WHEN '90d' THEN period_filter := NOW() - INTERVAL '90 days';\r\n        WHEN '1y' THEN period_filter := NOW() - INTERVAL '1 year';\r\n        ELSE period_filter := NOW() - INTERVAL '30 days';\r\n    END CASE;\r\n\r\n    -- Projects by category\r\n    SELECT jsonb_object_agg(category, count) INTO projects_by_category\r\n    FROM (\r\n        SELECT category, COUNT(*) as count\r\n        FROM projects\r\n        GROUP BY category\r\n        ORDER BY count DESC\r\n    ) cat_stats;\r\n\r\n    -- Projects by status\r\n    SELECT jsonb_object_agg(status, count) INTO projects_by_status\r\n    FROM (\r\n        SELECT status, COUNT(*) as count\r\n        FROM projects\r\n        GROUP BY status\r\n        ORDER BY count DESC\r\n    ) status_stats;\r\n\r\n    -- Projects by year\r\n    SELECT jsonb_object_agg(year::text, count) INTO projects_by_year\r\n    FROM (\r\n        SELECT year, COUNT(*) as count\r\n        FROM projects\r\n        GROUP BY year\r\n        ORDER BY year DESC\r\n    ) year_stats;\r\n\r\n    -- Recent projects (within time period)\r\n    SELECT jsonb_agg(\r\n        jsonb_build_object(\r\n            'id', id,\r\n            'title', title,\r\n            'slug', slug,\r\n            'category', category,\r\n            'status', status,\r\n            'published', published,\r\n            'featured', featured,\r\n            'created_at', created_at,\r\n            'updated_at', updated_at\r\n        )\r\n    ) INTO recent_projects\r\n    FROM (\r\n        SELECT * FROM projects\r\n        WHERE created_at >= period_filter\r\n        ORDER BY created_at DESC\r\n        LIMIT 10\r\n    ) recent;\r\n\r\n    result := jsonb_build_object(\r\n        'time_period', time_period,\r\n        'projects_by_category', COALESCE(projects_by_category, '{}'::jsonb),\r\n        'projects_by_status', COALESCE(projects_by_status, '{}'::jsonb),\r\n        'projects_by_year', COALESCE(projects_by_year, '{}'::jsonb),\r\n        'recent_projects', COALESCE(recent_projects, '[]'::jsonb),\r\n        'generated_at', NOW()\r\n    );\r\n\r\n    RETURN result;\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "get_user_role",
        "arguments": "user_id_input uuid DEFAULT auth.uid()",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.get_user_role(user_id_input uuid DEFAULT auth.uid())\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    profile RECORD;\r\nBEGIN\r\n    SELECT role INTO profile FROM public.profiles WHERE id = user_id_input;\r\n    \r\n    IF NOT FOUND THEN\r\n        RETURN jsonb_build_object(\r\n            'is_admin', false,\r\n            'role', null,\r\n            'error', 'Profile not found'\r\n        );\r\n    END IF;\r\n    \r\n    RETURN jsonb_build_object(\r\n        'is_admin', profile.role = 'admin',\r\n        'role', profile.role\r\n    );\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "get_user_role",
        "arguments": "user_id_input uuid DEFAULT auth.uid(), return_format text DEFAULT 'simple'::text",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.get_user_role(user_id_input uuid DEFAULT auth.uid(), return_format text DEFAULT 'simple'::text)\n RETURNS jsonb\n LANGUAGE plpgsql\n STABLE SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    user_profile RECORD;\r\n    result JSONB;\r\nBEGIN\r\n    SELECT p.role, p.is_verified, p.is_active\r\n    INTO user_profile\r\n    FROM public.profiles p\r\n    WHERE p.user_id = user_id_input; -- Fixed: was using p.id = user_id_input\r\n\r\n    IF NOT FOUND THEN\r\n        IF return_format = 'simple' THEN\r\n            RETURN jsonb_build_object('is_admin', false);\r\n        ELSE\r\n            RETURN jsonb_build_object(\r\n                'role', 'user',\r\n                'is_admin', false,\r\n                'is_verified', false,\r\n                'is_active', false,\r\n                'exists', false\r\n            );\r\n        END IF;\r\n    END IF;\r\n\r\n    IF return_format = 'simple' THEN\r\n        RETURN jsonb_build_object('is_admin', (user_profile.role = 'admin'));\r\n    ELSE\r\n        RETURN jsonb_build_object(\r\n            'role', user_profile.role,\r\n            'is_admin', (user_profile.role = 'admin'),\r\n            'is_verified', user_profile.is_verified,\r\n            'is_active', user_profile.is_active,\r\n            'exists', true\r\n        );\r\n    END IF;\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "get_users_without_profiles",
        "arguments": "",
        "return_type": "uuid[]",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.get_users_without_profiles()\n RETURNS uuid[]\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$DECLARE\r\n    result UUID[];\r\nBEGIN\r\n    SELECT ARRAY(\r\n        SELECT au.id FROM auth.users au \r\n        LEFT JOIN public.profiles p ON au.id = p.user_id \r\n        WHERE p.id IS NULL AND au.deleted_at IS NULL AND au.email IS NOT NULL\r\n    ) INTO result;\r\n    RETURN result;\r\nEND;$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "handle_new_user",
        "arguments": "",
        "return_type": "trigger",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.handle_new_user()\n RETURNS trigger\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$BEGIN\r\n      -- Simple profile creation matching existing schema\r\n      INSERT INTO public.profiles (\r\n          user_id,           -- Use user_id as FK to auth.users\r\n          email,\r\n          full_name,\r\n          avatar_url,\r\n          role,\r\n          is_verified,\r\n          is_active,\r\n          created_at,\r\n          updated_at\r\n      ) VALUES (\r\n          NEW.id,                                                    -- Map to user_id\r\n          NEW.email,\r\n          COALESCE(NEW.raw_user_meta_data->>'full_name', NEW.raw_user_meta_data->>'name'),\r\n          NEW.raw_user_meta_data->>'avatar_url',\r\n          'user',                                                    -- Default role\r\n          COALESCE(NEW.email_confirmed_at IS NOT NULL, FALSE),\r\n          TRUE,\r\n          NOW(),\r\n          NOW()\r\n      );\r\n\r\n      RETURN NEW;\r\n  END;$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "increment_view_count",
        "arguments": "table_type text, record_id uuid",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.increment_view_count(table_type text, record_id uuid)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\n  DECLARE\r\n      updated_count integer;\r\n  BEGIN\r\n      -- Validate table type to prevent SQL injection\r\n      IF table_type NOT IN ('projects', 'articles') THEN\r\n          RETURN jsonb_build_object(\r\n              'success', false,\r\n              'error', 'Invalid table type'\r\n          );\r\n      END IF;\r\n\r\n      IF table_type = 'projects' THEN\r\n          UPDATE public.projects\r\n          SET view_count = view_count + 1\r\n          WHERE id = record_id\r\n          RETURNING view_count INTO updated_count;\r\n      ELSIF table_type = 'articles' THEN\r\n          UPDATE public.articles\r\n          SET view_count = view_count + 1\r\n          WHERE id = record_id\r\n          RETURNING view_count INTO updated_count;\r\n      END IF;\r\n\r\n      IF FOUND THEN\r\n          RETURN jsonb_build_object(\r\n              'success', true,\r\n              'new_count', updated_count\r\n          );\r\n      ELSE\r\n          RETURN jsonb_build_object(\r\n              'success', false,\r\n              'error', 'Record not found'\r\n          );\r\n      END IF;\r\n  END;\r\n  $function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "is_admin_user",
        "arguments": "user_id_input uuid DEFAULT auth.uid()",
        "return_type": "boolean",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.is_admin_user(user_id_input uuid DEFAULT auth.uid())\n RETURNS boolean\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$DECLARE\r\n    user_role TEXT;\r\nBEGIN\r\n    SELECT role INTO user_role FROM public.profiles WHERE user_id = user_id_input;\r\n    RETURN COALESCE(user_role = 'admin', FALSE);\r\nEND;$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "is_current_user_admin",
        "arguments": "",
        "return_type": "boolean",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.is_current_user_admin()\n RETURNS boolean\n LANGUAGE sql\n STABLE SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n  SELECT public.auth_is_admin();\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "reset_view_counts",
        "arguments": "content_type text DEFAULT 'all'::text, confirm_reset boolean DEFAULT false",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.reset_view_counts(content_type text DEFAULT 'all'::text, confirm_reset boolean DEFAULT false)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    projects_reset integer := 0;\r\n    articles_reset integer := 0;\r\n    result jsonb;\r\nBEGIN\r\n    -- Check admin privileges\r\n    IF NOT public.is_current_user_admin() THEN\r\n        RAISE EXCEPTION 'Access denied. Admin privileges required.';\r\n    END IF;\r\n\r\n    -- Require explicit confirmation\r\n    IF NOT confirm_reset THEN\r\n        RAISE EXCEPTION 'Reset operation requires confirm_reset = true';\r\n    END IF;\r\n\r\n    -- Reset based on content type\r\n    IF content_type IN ('projects', 'all') THEN\r\n        UPDATE projects SET view_count = 0;\r\n        GET DIAGNOSTICS projects_reset = ROW_COUNT;\r\n    END IF;\r\n\r\n    IF content_type IN ('articles', 'all') THEN\r\n        UPDATE articles SET view_count = 0;\r\n        GET DIAGNOSTICS articles_reset = ROW_COUNT;\r\n    END IF;\r\n\r\n    result := jsonb_build_object(\r\n        'content_type', content_type,\r\n        'projects_reset', projects_reset,\r\n        'articles_reset', articles_reset,\r\n        'executed_at', NOW()\r\n    );\r\n\r\n    RETURN result;\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "safe_is_admin_user",
        "arguments": "user_id_input uuid",
        "return_type": "boolean",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.safe_is_admin_user(user_id_input uuid)\n RETURNS boolean\n LANGUAGE sql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n    SELECT COALESCE(\r\n        (SELECT role = 'admin' \r\n         FROM profiles \r\n         WHERE user_id = user_id_input \r\n         LIMIT 1), \r\n        false\r\n    );\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "safe_is_current_user_admin",
        "arguments": "",
        "return_type": "boolean",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.safe_is_current_user_admin()\n RETURNS boolean\n LANGUAGE sql\n SECURITY DEFINER\n SET search_path TO 'public'\nAS $function$\r\n    SELECT public.safe_is_admin_user(auth.uid());\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "update_inquiry_status",
        "arguments": "inquiry_id uuid, new_status text, admin_notes text DEFAULT NULL::text, priority_level integer DEFAULT NULL::integer",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.update_inquiry_status(inquiry_id uuid, new_status text, admin_notes text DEFAULT NULL::text, priority_level integer DEFAULT NULL::integer)\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nDECLARE\r\n    updated_inquiry inquiries%ROWTYPE;\r\n    admin_user_id uuid;\r\nBEGIN\r\n    -- Check admin privileges\r\n    IF NOT public.is_current_user_admin() THEN\r\n        RAISE EXCEPTION 'Access denied. Admin privileges required.';\r\n    END IF;\r\n\r\n    -- Validate status\r\n    IF new_status NOT IN ('new', 'pending', 'in_progress', 'resolved', 'closed') THEN\r\n        RAISE EXCEPTION 'Invalid status. Must be one of: new, pending, in_progress, resolved, closed';\r\n    END IF;\r\n\r\n    -- Get admin user ID\r\n    SELECT user_id INTO admin_user_id FROM profiles WHERE user_id = auth.uid();\r\n\r\n    -- Update inquiry\r\n    UPDATE inquiries \r\n    SET \r\n        status = new_status,\r\n        notes = CASE \r\n            WHEN admin_notes IS NOT NULL THEN \r\n                COALESCE(notes || E'\\n\\n', '') || '[' || NOW()::text || ' - Admin]: ' || admin_notes\r\n            ELSE notes\r\n        END,\r\n        priority = COALESCE(priority_level, priority),\r\n        assigned_to = CASE \r\n            WHEN new_status IN ('pending', 'in_progress') THEN admin_user_id\r\n            ELSE assigned_to\r\n        END,\r\n        updated_at = NOW()\r\n    WHERE id = inquiry_id\r\n    RETURNING * INTO updated_inquiry;\r\n\r\n    IF NOT FOUND THEN\r\n        RAISE EXCEPTION 'Inquiry not found with ID: %', inquiry_id;\r\n    END IF;\r\n\r\n    RETURN jsonb_build_object(\r\n        'success', true,\r\n        'inquiry', row_to_json(updated_inquiry),\r\n        'updated_at', NOW()\r\n    );\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "update_updated_at_column",
        "arguments": "",
        "return_type": "trigger",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.update_updated_at_column()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    NEW.updated_at = NOW();\r\n    RETURN NEW;\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "update_user_login",
        "arguments": "user_id_input uuid DEFAULT auth.uid()",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.update_user_login(user_id_input uuid DEFAULT auth.uid())\n RETURNS jsonb\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$BEGIN\r\n    UPDATE public.profiles \r\n    SET \r\n        last_login_at = NOW(),\r\n        login_count = login_count + 1,\r\n        updated_at = NOW()\r\n    WHERE user_id = user_id_input;\r\n    \r\n    IF FOUND THEN\r\n        RETURN jsonb_build_object('success', true);\r\n    ELSE\r\n        RETURN jsonb_build_object('success', false, 'error', 'Profile not found');\r\n    END IF;\r\nEND;$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "verify_profiles_schema",
        "arguments": "",
        "return_type": "TABLE(check_name text, status text, details text)",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.verify_profiles_schema()\n RETURNS TABLE(check_name text, status text, details text)\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n    RETURN QUERY\r\n    SELECT 'profiles_table_exists'::TEXT,\r\n           CASE WHEN EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'profiles') \r\n                THEN 'PASS' ELSE 'FAIL' END::TEXT,\r\n           'Profiles table existence check'::TEXT;\r\n    \r\n    RETURN QUERY\r\n    SELECT 'required_columns'::TEXT,\r\n           CASE WHEN (SELECT count(*) FROM information_schema.columns WHERE table_name = 'profiles' \r\n                     AND column_name IN ('id', 'email', 'role', 'provider', 'profile_completed', 'oauth_metadata', 'preferences')) = 7 \r\n                THEN 'PASS' ELSE 'FAIL' END::TEXT,\r\n           'Required columns presence check'::TEXT;\r\n    \r\n    RETURN QUERY\r\n    SELECT 'rls_enabled'::TEXT,\r\n           CASE WHEN (SELECT rowsecurity FROM pg_tables WHERE tablename = 'profiles' AND schemaname = 'public') \r\n                THEN 'PASS' ELSE 'FAIL' END::TEXT,\r\n           'Row Level Security enabled check'::TEXT;\r\n    \r\n    RETURN QUERY\r\n    SELECT 'rls_policies'::TEXT,\r\n           CASE WHEN (SELECT count(*) FROM pg_policies WHERE tablename = 'profiles' AND schemaname = 'public') >= 5 \r\n                THEN 'PASS' ELSE 'FAIL' END::TEXT,\r\n           'RLS policies existence check'::TEXT;\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "public",
        "function_name": "verify_rpc_functions",
        "arguments": "",
        "return_type": "TABLE(function_name text, exists_check text)",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION public.verify_rpc_functions()\n RETURNS TABLE(function_name text, exists_check text)\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\r\nBEGIN\r\n    RETURN QUERY\r\n    SELECT expected_functions.name::TEXT,\r\n           CASE WHEN routines.routine_name IS NOT NULL THEN 'EXISTS' ELSE 'MISSING' END::TEXT\r\n    FROM (VALUES \r\n        ('ensure_user_profile'),\r\n        ('check_profile_completion'),\r\n        ('complete_user_profile'),\r\n        ('handle_user_login'),\r\n        ('get_users_without_profiles'),\r\n        ('create_missing_profiles'),\r\n        ('get_profile_analytics')\r\n    ) AS expected_functions(name)\r\n    LEFT JOIN information_schema.routines \r\n        ON routines.routine_name = expected_functions.name\r\n        AND routines.routine_schema = 'public'\r\n    ORDER BY expected_functions.name;\r\nEND;\r\n$function$\n"
    },
    {
        "schema_name": "realtime",
        "function_name": "apply_rls",
        "arguments": "wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024)",
        "return_type": "SETOF realtime.wal_rls",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024))\n RETURNS SETOF realtime.wal_rls\n LANGUAGE plpgsql\nAS $function$\ndeclare\n-- Regclass of the table e.g. public.notes\nentity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;\n\n-- I, U, D, T: insert, update ...\naction realtime.action = (\n    case wal ->> 'action'\n        when 'I' then 'INSERT'\n        when 'U' then 'UPDATE'\n        when 'D' then 'DELETE'\n        else 'ERROR'\n    end\n);\n\n-- Is row level security enabled for the table\nis_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;\n\nsubscriptions realtime.subscription[] = array_agg(subs)\n    from\n        realtime.subscription subs\n    where\n        subs.entity = entity_;\n\n-- Subscription vars\nroles regrole[] = array_agg(distinct us.claims_role::text)\n    from\n        unnest(subscriptions) us;\n\nworking_role regrole;\nclaimed_role regrole;\nclaims jsonb;\n\nsubscription_id uuid;\nsubscription_has_access bool;\nvisible_to_subscription_ids uuid[] = '{}';\n\n-- structured info for wal's columns\ncolumns realtime.wal_column[];\n-- previous identity values for update/delete\nold_columns realtime.wal_column[];\n\nerror_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;\n\n-- Primary jsonb output for record\noutput jsonb;\n\nbegin\nperform set_config('role', null, true);\n\ncolumns =\n    array_agg(\n        (\n            x->>'name',\n            x->>'type',\n            x->>'typeoid',\n            realtime.cast(\n                (x->'value') #>> '{}',\n                coalesce(\n                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4\n                    (x->>'type')::regtype\n                )\n            ),\n            (pks ->> 'name') is not null,\n            true\n        )::realtime.wal_column\n    )\n    from\n        jsonb_array_elements(wal -> 'columns') x\n        left join jsonb_array_elements(wal -> 'pk') pks\n            on (x ->> 'name') = (pks ->> 'name');\n\nold_columns =\n    array_agg(\n        (\n            x->>'name',\n            x->>'type',\n            x->>'typeoid',\n            realtime.cast(\n                (x->'value') #>> '{}',\n                coalesce(\n                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4\n                    (x->>'type')::regtype\n                )\n            ),\n            (pks ->> 'name') is not null,\n            true\n        )::realtime.wal_column\n    )\n    from\n        jsonb_array_elements(wal -> 'identity') x\n        left join jsonb_array_elements(wal -> 'pk') pks\n            on (x ->> 'name') = (pks ->> 'name');\n\nfor working_role in select * from unnest(roles) loop\n\n    -- Update `is_selectable` for columns and old_columns\n    columns =\n        array_agg(\n            (\n                c.name,\n                c.type_name,\n                c.type_oid,\n                c.value,\n                c.is_pkey,\n                pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')\n            )::realtime.wal_column\n        )\n        from\n            unnest(columns) c;\n\n    old_columns =\n            array_agg(\n                (\n                    c.name,\n                    c.type_name,\n                    c.type_oid,\n                    c.value,\n                    c.is_pkey,\n                    pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')\n                )::realtime.wal_column\n            )\n            from\n                unnest(old_columns) c;\n\n    if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then\n        return next (\n            jsonb_build_object(\n                'schema', wal ->> 'schema',\n                'table', wal ->> 'table',\n                'type', action\n            ),\n            is_rls_enabled,\n            -- subscriptions is already filtered by entity\n            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),\n            array['Error 400: Bad Request, no primary key']\n        )::realtime.wal_rls;\n\n    -- The claims role does not have SELECT permission to the primary key of entity\n    elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then\n        return next (\n            jsonb_build_object(\n                'schema', wal ->> 'schema',\n                'table', wal ->> 'table',\n                'type', action\n            ),\n            is_rls_enabled,\n            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),\n            array['Error 401: Unauthorized']\n        )::realtime.wal_rls;\n\n    else\n        output = jsonb_build_object(\n            'schema', wal ->> 'schema',\n            'table', wal ->> 'table',\n            'type', action,\n            'commit_timestamp', to_char(\n                ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),\n                'YYYY-MM-DD\"T\"HH24:MI:SS.MS\"Z\"'\n            ),\n            'columns', (\n                select\n                    jsonb_agg(\n                        jsonb_build_object(\n                            'name', pa.attname,\n                            'type', pt.typname\n                        )\n                        order by pa.attnum asc\n                    )\n                from\n                    pg_attribute pa\n                    join pg_type pt\n                        on pa.atttypid = pt.oid\n                where\n                    attrelid = entity_\n                    and attnum > 0\n                    and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')\n            )\n        )\n        -- Add \"record\" key for insert and update\n        || case\n            when action in ('INSERT', 'UPDATE') then\n                jsonb_build_object(\n                    'record',\n                    (\n                        select\n                            jsonb_object_agg(\n                                -- if unchanged toast, get column name and value from old record\n                                coalesce((c).name, (oc).name),\n                                case\n                                    when (c).name is null then (oc).value\n                                    else (c).value\n                                end\n                            )\n                        from\n                            unnest(columns) c\n                            full outer join unnest(old_columns) oc\n                                on (c).name = (oc).name\n                        where\n                            coalesce((c).is_selectable, (oc).is_selectable)\n                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))\n                    )\n                )\n            else '{}'::jsonb\n        end\n        -- Add \"old_record\" key for update and delete\n        || case\n            when action = 'UPDATE' then\n                jsonb_build_object(\n                        'old_record',\n                        (\n                            select jsonb_object_agg((c).name, (c).value)\n                            from unnest(old_columns) c\n                            where\n                                (c).is_selectable\n                                and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))\n                        )\n                    )\n            when action = 'DELETE' then\n                jsonb_build_object(\n                    'old_record',\n                    (\n                        select jsonb_object_agg((c).name, (c).value)\n                        from unnest(old_columns) c\n                        where\n                            (c).is_selectable\n                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))\n                            and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey\n                    )\n                )\n            else '{}'::jsonb\n        end;\n\n        -- Create the prepared statement\n        if is_rls_enabled and action <> 'DELETE' then\n            if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then\n                deallocate walrus_rls_stmt;\n            end if;\n            execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);\n        end if;\n\n        visible_to_subscription_ids = '{}';\n\n        for subscription_id, claims in (\n                select\n                    subs.subscription_id,\n                    subs.claims\n                from\n                    unnest(subscriptions) subs\n                where\n                    subs.entity = entity_\n                    and subs.claims_role = working_role\n                    and (\n                        realtime.is_visible_through_filters(columns, subs.filters)\n                        or (\n                          action = 'DELETE'\n                          and realtime.is_visible_through_filters(old_columns, subs.filters)\n                        )\n                    )\n        ) loop\n\n            if not is_rls_enabled or action = 'DELETE' then\n                visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;\n            else\n                -- Check if RLS allows the role to see the record\n                perform\n                    -- Trim leading and trailing quotes from working_role because set_config\n                    -- doesn't recognize the role as valid if they are included\n                    set_config('role', trim(both '\"' from working_role::text), true),\n                    set_config('request.jwt.claims', claims::text, true);\n\n                execute 'execute walrus_rls_stmt' into subscription_has_access;\n\n                if subscription_has_access then\n                    visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;\n                end if;\n            end if;\n        end loop;\n\n        perform set_config('role', null, true);\n\n        return next (\n            output,\n            is_rls_enabled,\n            visible_to_subscription_ids,\n            case\n                when error_record_exceeds_max_size then array['Error 413: Payload Too Large']\n                else '{}'\n            end\n        )::realtime.wal_rls;\n\n    end if;\nend loop;\n\nperform set_config('role', null, true);\nend;\n$function$\n"
    },
    {
        "schema_name": "realtime",
        "function_name": "broadcast_changes",
        "arguments": "topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text DEFAULT 'ROW'::text",
        "return_type": "void",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text DEFAULT 'ROW'::text)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    -- Declare a variable to hold the JSONB representation of the row\n    row_data jsonb := '{}'::jsonb;\nBEGIN\n    IF level = 'STATEMENT' THEN\n        RAISE EXCEPTION 'function can only be triggered for each row, not for each statement';\n    END IF;\n    -- Check the operation type and handle accordingly\n    IF operation = 'INSERT' OR operation = 'UPDATE' OR operation = 'DELETE' THEN\n        row_data := jsonb_build_object('old_record', OLD, 'record', NEW, 'operation', operation, 'table', table_name, 'schema', table_schema);\n        PERFORM realtime.send (row_data, event_name, topic_name);\n    ELSE\n        RAISE EXCEPTION 'Unexpected operation type: %', operation;\n    END IF;\nEXCEPTION\n    WHEN OTHERS THEN\n        RAISE EXCEPTION 'Failed to process the row: %', SQLERRM;\nEND;\n\n$function$\n"
    },
    {
        "schema_name": "realtime",
        "function_name": "build_prepared_statement_sql",
        "arguments": "prepared_statement_name text, entity regclass, columns realtime.wal_column[]",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[])\n RETURNS text\n LANGUAGE sql\nAS $function$\n      /*\n      Builds a sql string that, if executed, creates a prepared statement to\n      tests retrive a row from *entity* by its primary key columns.\n      Example\n          select realtime.build_prepared_statement_sql('public.notes', '{\"id\"}'::text[], '{\"bigint\"}'::text[])\n      */\n          select\n      'prepare ' || prepared_statement_name || ' as\n          select\n              exists(\n                  select\n                      1\n                  from\n                      ' || entity || '\n                  where\n                      ' || string_agg(quote_ident(pkc.name) || '=' || quote_nullable(pkc.value #>> '{}') , ' and ') || '\n              )'\n          from\n              unnest(columns) pkc\n          where\n              pkc.is_pkey\n          group by\n              entity\n      $function$\n"
    },
    {
        "schema_name": "realtime",
        "function_name": "cast",
        "arguments": "val text, type_ regtype",
        "return_type": "jsonb",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION realtime.\"cast\"(val text, type_ regtype)\n RETURNS jsonb\n LANGUAGE plpgsql\n IMMUTABLE\nAS $function$\n    declare\n      res jsonb;\n    begin\n      execute format('select to_jsonb(%L::'|| type_::text || ')', val)  into res;\n      return res;\n    end\n    $function$\n"
    },
    {
        "schema_name": "realtime",
        "function_name": "check_equality_op",
        "arguments": "op realtime.equality_op, type_ regtype, val_1 text, val_2 text",
        "return_type": "boolean",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text)\n RETURNS boolean\n LANGUAGE plpgsql\n IMMUTABLE\nAS $function$\n      /*\n      Casts *val_1* and *val_2* as type *type_* and check the *op* condition for truthiness\n      */\n      declare\n          op_symbol text = (\n              case\n                  when op = 'eq' then '='\n                  when op = 'neq' then '!='\n                  when op = 'lt' then '<'\n                  when op = 'lte' then '<='\n                  when op = 'gt' then '>'\n                  when op = 'gte' then '>='\n                  when op = 'in' then '= any'\n                  else 'UNKNOWN OP'\n              end\n          );\n          res boolean;\n      begin\n          execute format(\n              'select %L::'|| type_::text || ' ' || op_symbol\n              || ' ( %L::'\n              || (\n                  case\n                      when op = 'in' then type_::text || '[]'\n                      else type_::text end\n              )\n              || ')', val_1, val_2) into res;\n          return res;\n      end;\n      $function$\n"
    },
    {
        "schema_name": "realtime",
        "function_name": "is_visible_through_filters",
        "arguments": "columns realtime.wal_column[], filters realtime.user_defined_filter[]",
        "return_type": "boolean",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[])\n RETURNS boolean\n LANGUAGE sql\n IMMUTABLE\nAS $function$\n    /*\n    Should the record be visible (true) or filtered out (false) after *filters* are applied\n    */\n        select\n            -- Default to allowed when no filters present\n            $2 is null -- no filters. this should not happen because subscriptions has a default\n            or array_length($2, 1) is null -- array length of an empty array is null\n            or bool_and(\n                coalesce(\n                    realtime.check_equality_op(\n                        op:=f.op,\n                        type_:=coalesce(\n                            col.type_oid::regtype, -- null when wal2json version <= 2.4\n                            col.type_name::regtype\n                        ),\n                        -- cast jsonb to text\n                        val_1:=col.value #>> '{}',\n                        val_2:=f.value\n                    ),\n                    false -- if null, filter does not match\n                )\n            )\n        from\n            unnest(filters) f\n            join unnest(columns) col\n                on f.column_name = col.name;\n    $function$\n"
    },
    {
        "schema_name": "realtime",
        "function_name": "list_changes",
        "arguments": "publication name, slot_name name, max_changes integer, max_record_bytes integer",
        "return_type": "SETOF realtime.wal_rls",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer)\n RETURNS SETOF realtime.wal_rls\n LANGUAGE sql\n SET log_min_messages TO 'fatal'\nAS $function$\n      with pub as (\n        select\n          concat_ws(\n            ',',\n            case when bool_or(pubinsert) then 'insert' else null end,\n            case when bool_or(pubupdate) then 'update' else null end,\n            case when bool_or(pubdelete) then 'delete' else null end\n          ) as w2j_actions,\n          coalesce(\n            string_agg(\n              realtime.quote_wal2json(format('%I.%I', schemaname, tablename)::regclass),\n              ','\n            ) filter (where ppt.tablename is not null and ppt.tablename not like '% %'),\n            ''\n          ) w2j_add_tables\n        from\n          pg_publication pp\n          left join pg_publication_tables ppt\n            on pp.pubname = ppt.pubname\n        where\n          pp.pubname = publication\n        group by\n          pp.pubname\n        limit 1\n      ),\n      w2j as (\n        select\n          x.*, pub.w2j_add_tables\n        from\n          pub,\n          pg_logical_slot_get_changes(\n            slot_name, null, max_changes,\n            'include-pk', 'true',\n            'include-transaction', 'false',\n            'include-timestamp', 'true',\n            'include-type-oids', 'true',\n            'format-version', '2',\n            'actions', pub.w2j_actions,\n            'add-tables', pub.w2j_add_tables\n          ) x\n      )\n      select\n        xyz.wal,\n        xyz.is_rls_enabled,\n        xyz.subscription_ids,\n        xyz.errors\n      from\n        w2j,\n        realtime.apply_rls(\n          wal := w2j.data::jsonb,\n          max_record_bytes := max_record_bytes\n        ) xyz(wal, is_rls_enabled, subscription_ids, errors)\n      where\n        w2j.w2j_add_tables <> ''\n        and xyz.subscription_ids[1] is not null\n    $function$\n"
    },
    {
        "schema_name": "realtime",
        "function_name": "quote_wal2json",
        "arguments": "entity regclass",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION realtime.quote_wal2json(entity regclass)\n RETURNS text\n LANGUAGE sql\n IMMUTABLE STRICT\nAS $function$\n      select\n        (\n          select string_agg('' || ch,'')\n          from unnest(string_to_array(nsp.nspname::text, null)) with ordinality x(ch, idx)\n          where\n            not (x.idx = 1 and x.ch = '\"')\n            and not (\n              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)\n              and x.ch = '\"'\n            )\n        )\n        || '.'\n        || (\n          select string_agg('' || ch,'')\n          from unnest(string_to_array(pc.relname::text, null)) with ordinality x(ch, idx)\n          where\n            not (x.idx = 1 and x.ch = '\"')\n            and not (\n              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)\n              and x.ch = '\"'\n            )\n          )\n      from\n        pg_class pc\n        join pg_namespace nsp\n          on pc.relnamespace = nsp.oid\n      where\n        pc.oid = entity\n    $function$\n"
    },
    {
        "schema_name": "realtime",
        "function_name": "send",
        "arguments": "payload jsonb, event text, topic text, private boolean DEFAULT true",
        "return_type": "void",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean DEFAULT true)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  BEGIN\n    -- Set the topic configuration\n    EXECUTE format('SET LOCAL realtime.topic TO %L', topic);\n\n    -- Attempt to insert the message\n    INSERT INTO realtime.messages (payload, event, topic, private, extension)\n    VALUES (payload, event, topic, private, 'broadcast');\n  EXCEPTION\n    WHEN OTHERS THEN\n      -- Capture and notify the error\n      RAISE WARNING 'ErrorSendingBroadcastMessage: %', SQLERRM;\n  END;\nEND;\n$function$\n"
    },
    {
        "schema_name": "realtime",
        "function_name": "subscription_check_filters",
        "arguments": "",
        "return_type": "trigger",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION realtime.subscription_check_filters()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\n    /*\n    Validates that the user defined filters for a subscription:\n    - refer to valid columns that the claimed role may access\n    - values are coercable to the correct column type\n    */\n    declare\n        col_names text[] = coalesce(\n                array_agg(c.column_name order by c.ordinal_position),\n                '{}'::text[]\n            )\n            from\n                information_schema.columns c\n            where\n                format('%I.%I', c.table_schema, c.table_name)::regclass = new.entity\n                and pg_catalog.has_column_privilege(\n                    (new.claims ->> 'role'),\n                    format('%I.%I', c.table_schema, c.table_name)::regclass,\n                    c.column_name,\n                    'SELECT'\n                );\n        filter realtime.user_defined_filter;\n        col_type regtype;\n\n        in_val jsonb;\n    begin\n        for filter in select * from unnest(new.filters) loop\n            -- Filtered column is valid\n            if not filter.column_name = any(col_names) then\n                raise exception 'invalid column for filter %', filter.column_name;\n            end if;\n\n            -- Type is sanitized and safe for string interpolation\n            col_type = (\n                select atttypid::regtype\n                from pg_catalog.pg_attribute\n                where attrelid = new.entity\n                      and attname = filter.column_name\n            );\n            if col_type is null then\n                raise exception 'failed to lookup type for column %', filter.column_name;\n            end if;\n\n            -- Set maximum number of entries for in filter\n            if filter.op = 'in'::realtime.equality_op then\n                in_val = realtime.cast(filter.value, (col_type::text || '[]')::regtype);\n                if coalesce(jsonb_array_length(in_val), 0) > 100 then\n                    raise exception 'too many values for `in` filter. Maximum 100';\n                end if;\n            else\n                -- raises an exception if value is not coercable to type\n                perform realtime.cast(filter.value, col_type);\n            end if;\n\n        end loop;\n\n        -- Apply consistent order to filters so the unique constraint on\n        -- (subscription_id, entity, filters) can't be tricked by a different filter order\n        new.filters = coalesce(\n            array_agg(f order by f.column_name, f.op, f.value),\n            '{}'\n        ) from unnest(new.filters) f;\n\n        return new;\n    end;\n    $function$\n"
    },
    {
        "schema_name": "realtime",
        "function_name": "to_regrole",
        "arguments": "role_name text",
        "return_type": "regrole",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION realtime.to_regrole(role_name text)\n RETURNS regrole\n LANGUAGE sql\n IMMUTABLE\nAS $function$ select role_name::regrole $function$\n"
    },
    {
        "schema_name": "realtime",
        "function_name": "topic",
        "arguments": "",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION realtime.topic()\n RETURNS text\n LANGUAGE sql\n STABLE\nAS $function$\nselect nullif(current_setting('realtime.topic', true), '')::text;\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "add_prefixes",
        "arguments": "_bucket_id text, _name text",
        "return_type": "void",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.add_prefixes(_bucket_id text, _name text)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n    prefixes text[];\nBEGIN\n    prefixes := \"storage\".\"get_prefixes\"(\"_name\");\n\n    IF array_length(prefixes, 1) > 0 THEN\n        INSERT INTO storage.prefixes (name, bucket_id)\n        SELECT UNNEST(prefixes) as name, \"_bucket_id\" ON CONFLICT DO NOTHING;\n    END IF;\nEND;\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "can_insert_object",
        "arguments": "bucketid text, name text, owner uuid, metadata jsonb",
        "return_type": "void",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  INSERT INTO \"storage\".\"objects\" (\"bucket_id\", \"name\", \"owner\", \"metadata\") VALUES (bucketid, name, owner, metadata);\n  -- hack to rollback the successful insert\n  RAISE sqlstate 'PT200' using\n  message = 'ROLLBACK',\n  detail = 'rollback successful insert';\nEND\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "delete_prefix",
        "arguments": "_bucket_id text, _name text",
        "return_type": "boolean",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.delete_prefix(_bucket_id text, _name text)\n RETURNS boolean\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nBEGIN\n    -- Check if we can delete the prefix\n    IF EXISTS(\n        SELECT FROM \"storage\".\"prefixes\"\n        WHERE \"prefixes\".\"bucket_id\" = \"_bucket_id\"\n          AND level = \"storage\".\"get_level\"(\"_name\") + 1\n          AND \"prefixes\".\"name\" COLLATE \"C\" LIKE \"_name\" || '/%'\n        LIMIT 1\n    )\n    OR EXISTS(\n        SELECT FROM \"storage\".\"objects\"\n        WHERE \"objects\".\"bucket_id\" = \"_bucket_id\"\n          AND \"storage\".\"get_level\"(\"objects\".\"name\") = \"storage\".\"get_level\"(\"_name\") + 1\n          AND \"objects\".\"name\" COLLATE \"C\" LIKE \"_name\" || '/%'\n        LIMIT 1\n    ) THEN\n    -- There are sub-objects, skip deletion\n    RETURN false;\n    ELSE\n        DELETE FROM \"storage\".\"prefixes\"\n        WHERE \"prefixes\".\"bucket_id\" = \"_bucket_id\"\n          AND level = \"storage\".\"get_level\"(\"_name\")\n          AND \"prefixes\".\"name\" = \"_name\";\n        RETURN true;\n    END IF;\nEND;\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "delete_prefix_hierarchy_trigger",
        "arguments": "",
        "return_type": "trigger",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.delete_prefix_hierarchy_trigger()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    prefix text;\nBEGIN\n    prefix := \"storage\".\"get_prefix\"(OLD.\"name\");\n\n    IF coalesce(prefix, '') != '' THEN\n        PERFORM \"storage\".\"delete_prefix\"(OLD.\"bucket_id\", prefix);\n    END IF;\n\n    RETURN OLD;\nEND;\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "enforce_bucket_name_length",
        "arguments": "",
        "return_type": "trigger",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.enforce_bucket_name_length()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nbegin\n    if length(new.name) > 100 then\n        raise exception 'bucket name \"%\" is too long (% characters). Max is 100.', new.name, length(new.name);\n    end if;\n    return new;\nend;\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "extension",
        "arguments": "name text",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.extension(name text)\n RETURNS text\n LANGUAGE plpgsql\n IMMUTABLE\nAS $function$\nDECLARE\n    _parts text[];\n    _filename text;\nBEGIN\n    SELECT string_to_array(name, '/') INTO _parts;\n    SELECT _parts[array_length(_parts,1)] INTO _filename;\n    RETURN reverse(split_part(reverse(_filename), '.', 1));\nEND\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "filename",
        "arguments": "name text",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.filename(name text)\n RETURNS text\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n_parts text[];\nBEGIN\n\tselect string_to_array(name, '/') into _parts;\n\treturn _parts[array_length(_parts,1)];\nEND\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "foldername",
        "arguments": "name text",
        "return_type": "text[]",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.foldername(name text)\n RETURNS text[]\n LANGUAGE plpgsql\n IMMUTABLE\nAS $function$\nDECLARE\n    _parts text[];\nBEGIN\n    -- Split on \"/\" to get path segments\n    SELECT string_to_array(name, '/') INTO _parts;\n    -- Return everything except the last segment\n    RETURN _parts[1 : array_length(_parts,1) - 1];\nEND\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "get_level",
        "arguments": "name text",
        "return_type": "integer",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.get_level(name text)\n RETURNS integer\n LANGUAGE sql\n IMMUTABLE STRICT\nAS $function$\nSELECT array_length(string_to_array(\"name\", '/'), 1);\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "get_prefix",
        "arguments": "name text",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.get_prefix(name text)\n RETURNS text\n LANGUAGE sql\n IMMUTABLE STRICT\nAS $function$\nSELECT\n    CASE WHEN strpos(\"name\", '/') > 0 THEN\n             regexp_replace(\"name\", '[\\/]{1}[^\\/]+\\/?$', '')\n         ELSE\n             ''\n        END;\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "get_prefixes",
        "arguments": "name text",
        "return_type": "text[]",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.get_prefixes(name text)\n RETURNS text[]\n LANGUAGE plpgsql\n IMMUTABLE STRICT\nAS $function$\nDECLARE\n    parts text[];\n    prefixes text[];\n    prefix text;\nBEGIN\n    -- Split the name into parts by '/'\n    parts := string_to_array(\"name\", '/');\n    prefixes := '{}';\n\n    -- Construct the prefixes, stopping one level below the last part\n    FOR i IN 1..array_length(parts, 1) - 1 LOOP\n            prefix := array_to_string(parts[1:i], '/');\n            prefixes := array_append(prefixes, prefix);\n    END LOOP;\n\n    RETURN prefixes;\nEND;\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "get_size_by_bucket",
        "arguments": "",
        "return_type": "TABLE(size bigint, bucket_id text)",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.get_size_by_bucket()\n RETURNS TABLE(size bigint, bucket_id text)\n LANGUAGE plpgsql\n STABLE\nAS $function$\nBEGIN\n    return query\n        select sum((metadata->>'size')::bigint) as size, obj.bucket_id\n        from \"storage\".objects as obj\n        group by obj.bucket_id;\nEND\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "list_multipart_uploads_with_delimiter",
        "arguments": "bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, next_key_token text DEFAULT ''::text, next_upload_token text DEFAULT ''::text",
        "return_type": "TABLE(key text, id text, created_at timestamp with time zone)",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, next_key_token text DEFAULT ''::text, next_upload_token text DEFAULT ''::text)\n RETURNS TABLE(key text, id text, created_at timestamp with time zone)\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    RETURN QUERY EXECUTE\n        'SELECT DISTINCT ON(key COLLATE \"C\") * from (\n            SELECT\n                CASE\n                    WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN\n                        substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1)))\n                    ELSE\n                        key\n                END AS key, id, created_at\n            FROM\n                storage.s3_multipart_uploads\n            WHERE\n                bucket_id = $5 AND\n                key ILIKE $1 || ''%'' AND\n                CASE\n                    WHEN $4 != '''' AND $6 = '''' THEN\n                        CASE\n                            WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN\n                                substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1))) COLLATE \"C\" > $4\n                            ELSE\n                                key COLLATE \"C\" > $4\n                            END\n                    ELSE\n                        true\n                END AND\n                CASE\n                    WHEN $6 != '''' THEN\n                        id COLLATE \"C\" > $6\n                    ELSE\n                        true\n                    END\n            ORDER BY\n                key COLLATE \"C\" ASC, created_at ASC) as e order by key COLLATE \"C\" LIMIT $3'\n        USING prefix_param, delimiter_param, max_keys, next_key_token, bucket_id, next_upload_token;\nEND;\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "list_objects_with_delimiter",
        "arguments": "bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, start_after text DEFAULT ''::text, next_token text DEFAULT ''::text",
        "return_type": "TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, start_after text DEFAULT ''::text, next_token text DEFAULT ''::text)\n RETURNS TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    RETURN QUERY EXECUTE\n        'SELECT DISTINCT ON(name COLLATE \"C\") * from (\n            SELECT\n                CASE\n                    WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN\n                        substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1)))\n                    ELSE\n                        name\n                END AS name, id, metadata, updated_at\n            FROM\n                storage.objects\n            WHERE\n                bucket_id = $5 AND\n                name ILIKE $1 || ''%'' AND\n                CASE\n                    WHEN $6 != '''' THEN\n                    name COLLATE \"C\" > $6\n                ELSE true END\n                AND CASE\n                    WHEN $4 != '''' THEN\n                        CASE\n                            WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN\n                                substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1))) COLLATE \"C\" > $4\n                            ELSE\n                                name COLLATE \"C\" > $4\n                            END\n                    ELSE\n                        true\n                END\n            ORDER BY\n                name COLLATE \"C\" ASC) as e order by name COLLATE \"C\" LIMIT $3'\n        USING prefix_param, delimiter_param, max_keys, next_token, bucket_id, start_after;\nEND;\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "objects_insert_prefix_trigger",
        "arguments": "",
        "return_type": "trigger",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.objects_insert_prefix_trigger()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    PERFORM \"storage\".\"add_prefixes\"(NEW.\"bucket_id\", NEW.\"name\");\n    NEW.level := \"storage\".\"get_level\"(NEW.\"name\");\n\n    RETURN NEW;\nEND;\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "objects_update_prefix_trigger",
        "arguments": "",
        "return_type": "trigger",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.objects_update_prefix_trigger()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    old_prefixes TEXT[];\nBEGIN\n    -- Ensure this is an update operation and the name has changed\n    IF TG_OP = 'UPDATE' AND (NEW.\"name\" <> OLD.\"name\" OR NEW.\"bucket_id\" <> OLD.\"bucket_id\") THEN\n        -- Retrieve old prefixes\n        old_prefixes := \"storage\".\"get_prefixes\"(OLD.\"name\");\n\n        -- Remove old prefixes that are only used by this object\n        WITH all_prefixes as (\n            SELECT unnest(old_prefixes) as prefix\n        ),\n        can_delete_prefixes as (\n             SELECT prefix\n             FROM all_prefixes\n             WHERE NOT EXISTS (\n                 SELECT 1 FROM \"storage\".\"objects\"\n                 WHERE \"bucket_id\" = OLD.\"bucket_id\"\n                   AND \"name\" <> OLD.\"name\"\n                   AND \"name\" LIKE (prefix || '%')\n             )\n         )\n        DELETE FROM \"storage\".\"prefixes\" WHERE name IN (SELECT prefix FROM can_delete_prefixes);\n\n        -- Add new prefixes\n        PERFORM \"storage\".\"add_prefixes\"(NEW.\"bucket_id\", NEW.\"name\");\n    END IF;\n    -- Set the new level\n    NEW.\"level\" := \"storage\".\"get_level\"(NEW.\"name\");\n\n    RETURN NEW;\nEND;\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "operation",
        "arguments": "",
        "return_type": "text",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.operation()\n RETURNS text\n LANGUAGE plpgsql\n STABLE\nAS $function$\nBEGIN\n    RETURN current_setting('storage.operation', true);\nEND;\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "prefixes_insert_trigger",
        "arguments": "",
        "return_type": "trigger",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.prefixes_insert_trigger()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    PERFORM \"storage\".\"add_prefixes\"(NEW.\"bucket_id\", NEW.\"name\");\n    RETURN NEW;\nEND;\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "search",
        "arguments": "prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text",
        "return_type": "TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text)\n RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)\n LANGUAGE plpgsql\nAS $function$\ndeclare\n    can_bypass_rls BOOLEAN;\nbegin\n    SELECT rolbypassrls\n    INTO can_bypass_rls\n    FROM pg_roles\n    WHERE rolname = coalesce(nullif(current_setting('role', true), 'none'), current_user);\n\n    IF can_bypass_rls THEN\n        RETURN QUERY SELECT * FROM storage.search_v1_optimised(prefix, bucketname, limits, levels, offsets, search, sortcolumn, sortorder);\n    ELSE\n        RETURN QUERY SELECT * FROM storage.search_legacy_v1(prefix, bucketname, limits, levels, offsets, search, sortcolumn, sortorder);\n    END IF;\nend;\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "search_legacy_v1",
        "arguments": "prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text",
        "return_type": "TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.search_legacy_v1(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text)\n RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)\n LANGUAGE plpgsql\n STABLE\nAS $function$\ndeclare\n    v_order_by text;\n    v_sort_order text;\nbegin\n    case\n        when sortcolumn = 'name' then\n            v_order_by = 'name';\n        when sortcolumn = 'updated_at' then\n            v_order_by = 'updated_at';\n        when sortcolumn = 'created_at' then\n            v_order_by = 'created_at';\n        when sortcolumn = 'last_accessed_at' then\n            v_order_by = 'last_accessed_at';\n        else\n            v_order_by = 'name';\n        end case;\n\n    case\n        when sortorder = 'asc' then\n            v_sort_order = 'asc';\n        when sortorder = 'desc' then\n            v_sort_order = 'desc';\n        else\n            v_sort_order = 'asc';\n        end case;\n\n    v_order_by = v_order_by || ' ' || v_sort_order;\n\n    return query execute\n        'with folders as (\n           select path_tokens[$1] as folder\n           from storage.objects\n             where objects.name ilike $2 || $3 || ''%''\n               and bucket_id = $4\n               and array_length(objects.path_tokens, 1) <> $1\n           group by folder\n           order by folder ' || v_sort_order || '\n     )\n     (select folder as \"name\",\n            null as id,\n            null as updated_at,\n            null as created_at,\n            null as last_accessed_at,\n            null as metadata from folders)\n     union all\n     (select path_tokens[$1] as \"name\",\n            id,\n            updated_at,\n            created_at,\n            last_accessed_at,\n            metadata\n     from storage.objects\n     where objects.name ilike $2 || $3 || ''%''\n       and bucket_id = $4\n       and array_length(objects.path_tokens, 1) = $1\n     order by ' || v_order_by || ')\n     limit $5\n     offset $6' using levels, prefix, search, bucketname, limits, offsets;\nend;\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "search_v1_optimised",
        "arguments": "prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text",
        "return_type": "TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.search_v1_optimised(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text)\n RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)\n LANGUAGE plpgsql\n STABLE\nAS $function$\ndeclare\n    v_order_by text;\n    v_sort_order text;\nbegin\n    case\n        when sortcolumn = 'name' then\n            v_order_by = 'name';\n        when sortcolumn = 'updated_at' then\n            v_order_by = 'updated_at';\n        when sortcolumn = 'created_at' then\n            v_order_by = 'created_at';\n        when sortcolumn = 'last_accessed_at' then\n            v_order_by = 'last_accessed_at';\n        else\n            v_order_by = 'name';\n        end case;\n\n    case\n        when sortorder = 'asc' then\n            v_sort_order = 'asc';\n        when sortorder = 'desc' then\n            v_sort_order = 'desc';\n        else\n            v_sort_order = 'asc';\n        end case;\n\n    v_order_by = v_order_by || ' ' || v_sort_order;\n\n    return query execute\n        'with folders as (\n           select (string_to_array(name, ''/''))[level] as name\n           from storage.prefixes\n             where lower(prefixes.name) like lower($2 || $3) || ''%''\n               and bucket_id = $4\n               and level = $1\n           order by name ' || v_sort_order || '\n     )\n     (select name,\n            null as id,\n            null as updated_at,\n            null as created_at,\n            null as last_accessed_at,\n            null as metadata from folders)\n     union all\n     (select path_tokens[level] as \"name\",\n            id,\n            updated_at,\n            created_at,\n            last_accessed_at,\n            metadata\n     from storage.objects\n     where lower(objects.name) like lower($2 || $3) || ''%''\n       and bucket_id = $4\n       and level = $1\n     order by ' || v_order_by || ')\n     limit $5\n     offset $6' using levels, prefix, search, bucketname, limits, offsets;\nend;\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "search_v2",
        "arguments": "prefix text, bucket_name text, limits integer DEFAULT 100, levels integer DEFAULT 1, start_after text DEFAULT ''::text",
        "return_type": "TABLE(key text, name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, metadata jsonb)",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.search_v2(prefix text, bucket_name text, limits integer DEFAULT 100, levels integer DEFAULT 1, start_after text DEFAULT ''::text)\n RETURNS TABLE(key text, name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, metadata jsonb)\n LANGUAGE plpgsql\n STABLE\nAS $function$\nBEGIN\n    RETURN query EXECUTE\n        $sql$\n        SELECT * FROM (\n            (\n                SELECT\n                    split_part(name, '/', $4) AS key,\n                    name || '/' AS name,\n                    NULL::uuid AS id,\n                    NULL::timestamptz AS updated_at,\n                    NULL::timestamptz AS created_at,\n                    NULL::jsonb AS metadata\n                FROM storage.prefixes\n                WHERE name COLLATE \"C\" LIKE $1 || '%'\n                AND bucket_id = $2\n                AND level = $4\n                AND name COLLATE \"C\" > $5\n                ORDER BY prefixes.name COLLATE \"C\" LIMIT $3\n            )\n            UNION ALL\n            (SELECT split_part(name, '/', $4) AS key,\n                name,\n                id,\n                updated_at,\n                created_at,\n                metadata\n            FROM storage.objects\n            WHERE name COLLATE \"C\" LIKE $1 || '%'\n                AND bucket_id = $2\n                AND level = $4\n                AND name COLLATE \"C\" > $5\n            ORDER BY name COLLATE \"C\" LIMIT $3)\n        ) obj\n        ORDER BY name COLLATE \"C\" LIMIT $3;\n        $sql$\n        USING prefix, bucket_name, limits, levels, start_after;\nEND;\n$function$\n"
    },
    {
        "schema_name": "storage",
        "function_name": "update_updated_at_column",
        "arguments": "",
        "return_type": "trigger",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION storage.update_updated_at_column()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    NEW.updated_at = now();\n    RETURN NEW; \nEND;\n$function$\n"
    },
    {
        "schema_name": "vault",
        "function_name": "_crypto_aead_det_decrypt",
        "arguments": "message bytea, additional bytea, key_id bigint, context bytea DEFAULT '\\x7067736f6469756d'::bytea, nonce bytea DEFAULT NULL::bytea",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION vault._crypto_aead_det_decrypt(message bytea, additional bytea, key_id bigint, context bytea DEFAULT '\\x7067736f6469756d'::bytea, nonce bytea DEFAULT NULL::bytea)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE\nAS '$libdir/supabase_vault', $function$pgsodium_crypto_aead_det_decrypt_by_id$function$\n"
    },
    {
        "schema_name": "vault",
        "function_name": "_crypto_aead_det_encrypt",
        "arguments": "message bytea, additional bytea, key_id bigint, context bytea DEFAULT '\\x7067736f6469756d'::bytea, nonce bytea DEFAULT NULL::bytea",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION vault._crypto_aead_det_encrypt(message bytea, additional bytea, key_id bigint, context bytea DEFAULT '\\x7067736f6469756d'::bytea, nonce bytea DEFAULT NULL::bytea)\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE\nAS '$libdir/supabase_vault', $function$pgsodium_crypto_aead_det_encrypt_by_id$function$\n"
    },
    {
        "schema_name": "vault",
        "function_name": "_crypto_aead_det_noncegen",
        "arguments": "",
        "return_type": "bytea",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION vault._crypto_aead_det_noncegen()\n RETURNS bytea\n LANGUAGE c\n IMMUTABLE\nAS '$libdir/supabase_vault', $function$pgsodium_crypto_aead_det_noncegen$function$\n"
    },
    {
        "schema_name": "vault",
        "function_name": "create_secret",
        "arguments": "new_secret text, new_name text DEFAULT NULL::text, new_description text DEFAULT ''::text, new_key_id uuid DEFAULT NULL::uuid",
        "return_type": "uuid",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION vault.create_secret(new_secret text, new_name text DEFAULT NULL::text, new_description text DEFAULT ''::text, new_key_id uuid DEFAULT NULL::uuid)\n RETURNS uuid\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO ''\nAS $function$\nDECLARE\n  rec record;\nBEGIN\n  INSERT INTO vault.secrets (secret, name, description)\n  VALUES (\n    new_secret,\n    new_name,\n    new_description\n  )\n  RETURNING * INTO rec;\n  UPDATE vault.secrets s\n  SET secret = encode(vault._crypto_aead_det_encrypt(\n    message := convert_to(rec.secret, 'utf8'),\n    additional := convert_to(s.id::text, 'utf8'),\n    key_id := 0,\n    context := 'pgsodium'::bytea,\n    nonce := rec.nonce\n  ), 'base64')\n  WHERE id = rec.id;\n  RETURN rec.id;\nEND\n$function$\n"
    },
    {
        "schema_name": "vault",
        "function_name": "update_secret",
        "arguments": "secret_id uuid, new_secret text DEFAULT NULL::text, new_name text DEFAULT NULL::text, new_description text DEFAULT NULL::text, new_key_id uuid DEFAULT NULL::uuid",
        "return_type": "void",
        "function_type": "Function",
        "function_definition": "CREATE OR REPLACE FUNCTION vault.update_secret(secret_id uuid, new_secret text DEFAULT NULL::text, new_name text DEFAULT NULL::text, new_description text DEFAULT NULL::text, new_key_id uuid DEFAULT NULL::uuid)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\n SET search_path TO ''\nAS $function$\nDECLARE\n  decrypted_secret text := (SELECT decrypted_secret FROM vault.decrypted_secrets WHERE id = secret_id);\nBEGIN\n  UPDATE vault.secrets s\n  SET\n    secret = CASE WHEN new_secret IS NULL THEN s.secret\n                  ELSE encode(vault._crypto_aead_det_encrypt(\n                    message := convert_to(new_secret, 'utf8'),\n                    additional := convert_to(s.id::text, 'utf8'),\n                    key_id := 0,\n                    context := 'pgsodium'::bytea,\n                    nonce := s.nonce\n                  ), 'base64') END,\n    name = coalesce(new_name, s.name),\n    description = coalesce(new_description, s.description),\n    updated_at = now()\n  WHERE s.id = secret_id;\nEND\n$function$\n"
    }
]